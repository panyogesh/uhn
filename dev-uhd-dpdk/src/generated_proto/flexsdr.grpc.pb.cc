// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flexsdr.proto

#include "flexsdr.pb.h"
#include "flexsdr.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flexsdr {

static const char* FlexSDRControl_method_names[] = {
  "/flexsdr.FlexSDRControl/GetDeviceInfo",
  "/flexsdr.FlexSDRControl/SetClockRate",
  "/flexsdr.FlexSDRControl/GetClockRate",
  "/flexsdr.FlexSDRControl/SetRxGain",
  "/flexsdr.FlexSDRControl/GetRxGain",
  "/flexsdr.FlexSDRControl/SetTxGain",
  "/flexsdr.FlexSDRControl/GetTxGain",
  "/flexsdr.FlexSDRControl/SetRxRate",
  "/flexsdr.FlexSDRControl/GetRxRate",
  "/flexsdr.FlexSDRControl/SetTxRate",
  "/flexsdr.FlexSDRControl/GetTxRate",
  "/flexsdr.FlexSDRControl/SetRxFreq",
  "/flexsdr.FlexSDRControl/GetRxFreq",
  "/flexsdr.FlexSDRControl/SetTxFreq",
  "/flexsdr.FlexSDRControl/GetTxFreq",
};

std::unique_ptr< FlexSDRControl::Stub> FlexSDRControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FlexSDRControl::Stub> stub(new FlexSDRControl::Stub(channel));
  return stub;
}

FlexSDRControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetDeviceInfo_(FlexSDRControl_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetClockRate_(FlexSDRControl_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClockRate_(FlexSDRControl_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRxGain_(FlexSDRControl_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRxGain_(FlexSDRControl_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTxGain_(FlexSDRControl_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxGain_(FlexSDRControl_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRxRate_(FlexSDRControl_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRxRate_(FlexSDRControl_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTxRate_(FlexSDRControl_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxRate_(FlexSDRControl_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRxFreq_(FlexSDRControl_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRxFreq_(FlexSDRControl_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTxFreq_(FlexSDRControl_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxFreq_(FlexSDRControl_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FlexSDRControl::Stub::GetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::flexsdr::DeviceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDeviceInfo_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::GetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDeviceInfo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::DeviceInfoResponse>* FlexSDRControl::Stub::AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::DeviceInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetDeviceInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::DeviceInfoResponse>* FlexSDRControl::Stub::PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::DeviceInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetDeviceInfo_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::SetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::flexsdr::ClockRateResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetClockRate_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::SetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetClockRate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>* FlexSDRControl::Stub::AsyncSetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::ClockRateResponseParams>::Create(channel_.get(), cq, rpcmethod_SetClockRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>* FlexSDRControl::Stub::PrepareAsyncSetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::ClockRateResponseParams>::Create(channel_.get(), cq, rpcmethod_SetClockRate_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::GetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::flexsdr::ClockRateResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetClockRate_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::GetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetClockRate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>* FlexSDRControl::Stub::AsyncGetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::ClockRateResponseParams>::Create(channel_.get(), cq, rpcmethod_GetClockRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>* FlexSDRControl::Stub::PrepareAsyncGetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::ClockRateResponseParams>::Create(channel_.get(), cq, rpcmethod_GetClockRate_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::SetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRxGain_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::SetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRxGain_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* FlexSDRControl::Stub::AsyncSetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::GainResponseParams>::Create(channel_.get(), cq, rpcmethod_SetRxGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* FlexSDRControl::Stub::PrepareAsyncSetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::GainResponseParams>::Create(channel_.get(), cq, rpcmethod_SetRxGain_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::GetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRxGain_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::GetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRxGain_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* FlexSDRControl::Stub::AsyncGetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::GainResponseParams>::Create(channel_.get(), cq, rpcmethod_GetRxGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* FlexSDRControl::Stub::PrepareAsyncGetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::GainResponseParams>::Create(channel_.get(), cq, rpcmethod_GetRxGain_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::SetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTxGain_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::SetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTxGain_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* FlexSDRControl::Stub::AsyncSetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::GainResponseParams>::Create(channel_.get(), cq, rpcmethod_SetTxGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* FlexSDRControl::Stub::PrepareAsyncSetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::GainResponseParams>::Create(channel_.get(), cq, rpcmethod_SetTxGain_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::GetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTxGain_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::GetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxGain_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* FlexSDRControl::Stub::AsyncGetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::GainResponseParams>::Create(channel_.get(), cq, rpcmethod_GetTxGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* FlexSDRControl::Stub::PrepareAsyncGetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::GainResponseParams>::Create(channel_.get(), cq, rpcmethod_GetTxGain_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::SetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRxRate_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::SetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRxRate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* FlexSDRControl::Stub::AsyncSetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::RateResponseParams>::Create(channel_.get(), cq, rpcmethod_SetRxRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* FlexSDRControl::Stub::PrepareAsyncSetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::RateResponseParams>::Create(channel_.get(), cq, rpcmethod_SetRxRate_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::GetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRxRate_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::GetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRxRate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* FlexSDRControl::Stub::AsyncGetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::RateResponseParams>::Create(channel_.get(), cq, rpcmethod_GetRxRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* FlexSDRControl::Stub::PrepareAsyncGetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::RateResponseParams>::Create(channel_.get(), cq, rpcmethod_GetRxRate_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::SetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTxRate_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::SetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTxRate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* FlexSDRControl::Stub::AsyncSetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::RateResponseParams>::Create(channel_.get(), cq, rpcmethod_SetTxRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* FlexSDRControl::Stub::PrepareAsyncSetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::RateResponseParams>::Create(channel_.get(), cq, rpcmethod_SetTxRate_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::GetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTxRate_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::GetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxRate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* FlexSDRControl::Stub::AsyncGetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::RateResponseParams>::Create(channel_.get(), cq, rpcmethod_GetTxRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* FlexSDRControl::Stub::PrepareAsyncGetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::RateResponseParams>::Create(channel_.get(), cq, rpcmethod_GetTxRate_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::SetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::flexsdr::FrequencyResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRxFreq_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::SetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRxFreq_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>* FlexSDRControl::Stub::AsyncSetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::FrequencyResponseParams>::Create(channel_.get(), cq, rpcmethod_SetRxFreq_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>* FlexSDRControl::Stub::PrepareAsyncSetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::FrequencyResponseParams>::Create(channel_.get(), cq, rpcmethod_SetRxFreq_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::GetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::flexsdr::FrequencyValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRxFreq_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::GetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRxFreq_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>* FlexSDRControl::Stub::AsyncGetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::FrequencyValue>::Create(channel_.get(), cq, rpcmethod_GetRxFreq_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>* FlexSDRControl::Stub::PrepareAsyncGetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::FrequencyValue>::Create(channel_.get(), cq, rpcmethod_GetRxFreq_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::SetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::flexsdr::FrequencyResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTxFreq_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::SetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTxFreq_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>* FlexSDRControl::Stub::AsyncSetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::FrequencyResponseParams>::Create(channel_.get(), cq, rpcmethod_SetTxFreq_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>* FlexSDRControl::Stub::PrepareAsyncSetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::FrequencyResponseParams>::Create(channel_.get(), cq, rpcmethod_SetTxFreq_, context, request, false);
}

::grpc::Status FlexSDRControl::Stub::GetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::flexsdr::FrequencyValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTxFreq_, context, request, response);
}

void FlexSDRControl::Stub::experimental_async::GetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxFreq_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>* FlexSDRControl::Stub::AsyncGetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::FrequencyValue>::Create(channel_.get(), cq, rpcmethod_GetTxFreq_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>* FlexSDRControl::Stub::PrepareAsyncGetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flexsdr::FrequencyValue>::Create(channel_.get(), cq, rpcmethod_GetTxFreq_, context, request, false);
}

FlexSDRControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::DeviceInfoRequest, ::flexsdr::DeviceInfoResponse>(
          std::mem_fn(&FlexSDRControl::Service::GetDeviceInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::ClockRateRequestParams, ::flexsdr::ClockRateResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::SetClockRate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::ClockRateRequestParams, ::flexsdr::ClockRateResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::GetClockRate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::GainRequestParams, ::flexsdr::GainResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::SetRxGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::GainRequestParams, ::flexsdr::GainResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::GetRxGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::GainRequestParams, ::flexsdr::GainResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::SetTxGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::GainRequestParams, ::flexsdr::GainResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::GetTxGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::RateRequestParams, ::flexsdr::RateResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::SetRxRate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::RateRequestParams, ::flexsdr::RateResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::GetRxRate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::RateRequestParams, ::flexsdr::RateResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::SetTxRate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::RateRequestParams, ::flexsdr::RateResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::GetTxRate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::FrequencyRequestParams, ::flexsdr::FrequencyResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::SetRxFreq), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::ChannelRequest, ::flexsdr::FrequencyValue>(
          std::mem_fn(&FlexSDRControl::Service::GetRxFreq), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::FrequencyRequestParams, ::flexsdr::FrequencyResponseParams>(
          std::mem_fn(&FlexSDRControl::Service::SetTxFreq), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlexSDRControl_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlexSDRControl::Service, ::flexsdr::ChannelRequest, ::flexsdr::FrequencyValue>(
          std::mem_fn(&FlexSDRControl::Service::GetTxFreq), this)));
}

FlexSDRControl::Service::~Service() {
}

::grpc::Status FlexSDRControl::Service::GetDeviceInfo(::grpc::ServerContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::SetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::GetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::SetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::GetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::SetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::GetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::SetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::GetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::SetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::GetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::SetRxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::GetRxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::SetTxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlexSDRControl::Service::GetTxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flexsdr

