// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flexsdr.proto
#ifndef GRPC_flexsdr_2eproto__INCLUDED
#define GRPC_flexsdr_2eproto__INCLUDED

#include "flexsdr.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace flexsdr {

class FlexSDRControl final {
 public:
  static constexpr char const* service_full_name() {
    return "flexsdr.FlexSDRControl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Device status
    virtual ::grpc::Status GetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::flexsdr::DeviceInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::DeviceInfoResponse>> AsyncGetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::DeviceInfoResponse>>(AsyncGetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::DeviceInfoResponse>> PrepareAsyncGetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::DeviceInfoResponse>>(PrepareAsyncGetDeviceInfoRaw(context, request, cq));
    }
    // Clock rate
    virtual ::grpc::Status SetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::flexsdr::ClockRateResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>> AsyncSetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>>(AsyncSetClockRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>> PrepareAsyncSetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>>(PrepareAsyncSetClockRateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::flexsdr::ClockRateResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>> AsyncGetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>>(AsyncGetClockRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>> PrepareAsyncGetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>>(PrepareAsyncGetClockRateRaw(context, request, cq));
    }
    // Gain control methods
    virtual ::grpc::Status SetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>> AsyncSetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>>(AsyncSetRxGainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>> PrepareAsyncSetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>>(PrepareAsyncSetRxGainRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>> AsyncGetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>>(AsyncGetRxGainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>> PrepareAsyncGetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>>(PrepareAsyncGetRxGainRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>> AsyncSetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>>(AsyncSetTxGainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>> PrepareAsyncSetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>>(PrepareAsyncSetTxGainRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>> AsyncGetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>>(AsyncGetTxGainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>> PrepareAsyncGetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>>(PrepareAsyncGetTxGainRaw(context, request, cq));
    }
    virtual ::grpc::Status SetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>> AsyncSetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>>(AsyncSetRxRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>> PrepareAsyncSetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>>(PrepareAsyncSetRxRateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>> AsyncGetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>>(AsyncGetRxRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>> PrepareAsyncGetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>>(PrepareAsyncGetRxRateRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>> AsyncSetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>>(AsyncSetTxRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>> PrepareAsyncSetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>>(PrepareAsyncSetTxRateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>> AsyncGetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>>(AsyncGetTxRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>> PrepareAsyncGetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>>(PrepareAsyncGetTxRateRaw(context, request, cq));
    }
    // Frequency control methods
    virtual ::grpc::Status SetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::flexsdr::FrequencyResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>> AsyncSetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>>(AsyncSetRxFreqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>> PrepareAsyncSetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>>(PrepareAsyncSetRxFreqRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::flexsdr::FrequencyValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>> AsyncGetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>>(AsyncGetRxFreqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>> PrepareAsyncGetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>>(PrepareAsyncGetRxFreqRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::flexsdr::FrequencyResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>> AsyncSetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>>(AsyncSetTxFreqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>> PrepareAsyncSetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>>(PrepareAsyncSetTxFreqRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::flexsdr::FrequencyValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>> AsyncGetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>>(AsyncGetTxFreqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>> PrepareAsyncGetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>>(PrepareAsyncGetTxFreqRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Device status
      virtual void GetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Clock rate
      virtual void SetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      // Gain control methods
      virtual void SetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      // Frequency control methods
      virtual void SetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::DeviceInfoResponse>* AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::DeviceInfoResponse>* PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>* AsyncSetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>* PrepareAsyncSetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>* AsyncGetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::ClockRateResponseParams>* PrepareAsyncGetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>* AsyncSetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>* PrepareAsyncSetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>* AsyncGetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>* PrepareAsyncGetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>* AsyncSetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>* PrepareAsyncSetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>* AsyncGetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::GainResponseParams>* PrepareAsyncGetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>* AsyncSetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>* PrepareAsyncSetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>* AsyncGetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>* PrepareAsyncGetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>* AsyncSetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>* PrepareAsyncSetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>* AsyncGetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::RateResponseParams>* PrepareAsyncGetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>* AsyncSetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>* PrepareAsyncSetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>* AsyncGetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>* PrepareAsyncGetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>* AsyncSetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyResponseParams>* PrepareAsyncSetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>* AsyncGetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flexsdr::FrequencyValue>* PrepareAsyncGetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::flexsdr::DeviceInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::DeviceInfoResponse>> AsyncGetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::DeviceInfoResponse>>(AsyncGetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::DeviceInfoResponse>> PrepareAsyncGetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::DeviceInfoResponse>>(PrepareAsyncGetDeviceInfoRaw(context, request, cq));
    }
    ::grpc::Status SetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::flexsdr::ClockRateResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>> AsyncSetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>>(AsyncSetClockRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>> PrepareAsyncSetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>>(PrepareAsyncSetClockRateRaw(context, request, cq));
    }
    ::grpc::Status GetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::flexsdr::ClockRateResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>> AsyncGetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>>(AsyncGetClockRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>> PrepareAsyncGetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>>(PrepareAsyncGetClockRateRaw(context, request, cq));
    }
    ::grpc::Status SetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>> AsyncSetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>>(AsyncSetRxGainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>> PrepareAsyncSetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>>(PrepareAsyncSetRxGainRaw(context, request, cq));
    }
    ::grpc::Status GetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>> AsyncGetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>>(AsyncGetRxGainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>> PrepareAsyncGetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>>(PrepareAsyncGetRxGainRaw(context, request, cq));
    }
    ::grpc::Status SetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>> AsyncSetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>>(AsyncSetTxGainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>> PrepareAsyncSetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>>(PrepareAsyncSetTxGainRaw(context, request, cq));
    }
    ::grpc::Status GetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::flexsdr::GainResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>> AsyncGetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>>(AsyncGetTxGainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>> PrepareAsyncGetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>>(PrepareAsyncGetTxGainRaw(context, request, cq));
    }
    ::grpc::Status SetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>> AsyncSetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>>(AsyncSetRxRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>> PrepareAsyncSetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>>(PrepareAsyncSetRxRateRaw(context, request, cq));
    }
    ::grpc::Status GetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>> AsyncGetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>>(AsyncGetRxRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>> PrepareAsyncGetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>>(PrepareAsyncGetRxRateRaw(context, request, cq));
    }
    ::grpc::Status SetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>> AsyncSetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>>(AsyncSetTxRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>> PrepareAsyncSetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>>(PrepareAsyncSetTxRateRaw(context, request, cq));
    }
    ::grpc::Status GetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::flexsdr::RateResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>> AsyncGetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>>(AsyncGetTxRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>> PrepareAsyncGetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>>(PrepareAsyncGetTxRateRaw(context, request, cq));
    }
    ::grpc::Status SetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::flexsdr::FrequencyResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>> AsyncSetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>>(AsyncSetRxFreqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>> PrepareAsyncSetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>>(PrepareAsyncSetRxFreqRaw(context, request, cq));
    }
    ::grpc::Status GetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::flexsdr::FrequencyValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>> AsyncGetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>>(AsyncGetRxFreqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>> PrepareAsyncGetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>>(PrepareAsyncGetRxFreqRaw(context, request, cq));
    }
    ::grpc::Status SetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::flexsdr::FrequencyResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>> AsyncSetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>>(AsyncSetTxFreqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>> PrepareAsyncSetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>>(PrepareAsyncSetTxFreqRaw(context, request, cq));
    }
    ::grpc::Status GetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::flexsdr::FrequencyValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>> AsyncGetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>>(AsyncGetTxFreqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>> PrepareAsyncGetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>>(PrepareAsyncGetTxFreqRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDeviceInfo(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void SetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response, std::function<void(::grpc::Status)>) override;
      void GetClockRate(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response, std::function<void(::grpc::Status)>) override;
      void SetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)>) override;
      void GetRxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)>) override;
      void SetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)>) override;
      void GetTxGain(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response, std::function<void(::grpc::Status)>) override;
      void SetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)>) override;
      void GetRxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)>) override;
      void SetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)>) override;
      void GetTxRate(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response, std::function<void(::grpc::Status)>) override;
      void SetRxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response, std::function<void(::grpc::Status)>) override;
      void GetRxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response, std::function<void(::grpc::Status)>) override;
      void SetTxFreq(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response, std::function<void(::grpc::Status)>) override;
      void GetTxFreq(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flexsdr::DeviceInfoResponse>* AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::DeviceInfoResponse>* PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::flexsdr::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>* AsyncSetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>* PrepareAsyncSetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>* AsyncGetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::ClockRateResponseParams>* PrepareAsyncGetClockRateRaw(::grpc::ClientContext* context, const ::flexsdr::ClockRateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* AsyncSetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* PrepareAsyncSetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* AsyncGetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* PrepareAsyncGetRxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* AsyncSetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* PrepareAsyncSetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* AsyncGetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::GainResponseParams>* PrepareAsyncGetTxGainRaw(::grpc::ClientContext* context, const ::flexsdr::GainRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* AsyncSetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* PrepareAsyncSetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* AsyncGetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* PrepareAsyncGetRxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* AsyncSetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* PrepareAsyncSetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* AsyncGetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::RateResponseParams>* PrepareAsyncGetTxRateRaw(::grpc::ClientContext* context, const ::flexsdr::RateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>* AsyncSetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>* PrepareAsyncSetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>* AsyncGetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>* PrepareAsyncGetRxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>* AsyncSetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyResponseParams>* PrepareAsyncSetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::FrequencyRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>* AsyncGetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flexsdr::FrequencyValue>* PrepareAsyncGetTxFreqRaw(::grpc::ClientContext* context, const ::flexsdr::ChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SetClockRate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClockRate_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRxGain_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRxGain_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTxGain_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxGain_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRxRate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRxRate_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTxRate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxRate_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRxFreq_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRxFreq_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTxFreq_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxFreq_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Device status
    virtual ::grpc::Status GetDeviceInfo(::grpc::ServerContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response);
    // Clock rate
    virtual ::grpc::Status SetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response);
    virtual ::grpc::Status GetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response);
    // Gain control methods
    virtual ::grpc::Status SetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response);
    virtual ::grpc::Status GetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response);
    virtual ::grpc::Status SetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response);
    virtual ::grpc::Status GetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response);
    virtual ::grpc::Status SetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response);
    virtual ::grpc::Status GetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response);
    virtual ::grpc::Status SetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response);
    virtual ::grpc::Status GetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response);
    // Frequency control methods
    virtual ::grpc::Status SetRxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response);
    virtual ::grpc::Status GetRxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response);
    virtual ::grpc::Status SetTxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response);
    virtual ::grpc::Status GetTxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceInfo(::grpc::ServerContext* context, ::flexsdr::DeviceInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::DeviceInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetClockRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetClockRate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetClockRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetClockRate(::grpc::ServerContext* context, ::flexsdr::ClockRateRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::ClockRateResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClockRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetClockRate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetClockRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClockRate(::grpc::ServerContext* context, ::flexsdr::ClockRateRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::ClockRateResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetRxGain() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetRxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRxGain(::grpc::ServerContext* context, ::flexsdr::GainRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::GainResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRxGain() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetRxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxGain(::grpc::ServerContext* context, ::flexsdr::GainRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::GainResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetTxGain() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetTxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTxGain(::grpc::ServerContext* context, ::flexsdr::GainRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::GainResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTxGain() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetTxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxGain(::grpc::ServerContext* context, ::flexsdr::GainRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::GainResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetRxRate() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetRxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRxRate(::grpc::ServerContext* context, ::flexsdr::RateRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::RateResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRxRate() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetRxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxRate(::grpc::ServerContext* context, ::flexsdr::RateRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::RateResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetTxRate() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetTxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTxRate(::grpc::ServerContext* context, ::flexsdr::RateRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::RateResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTxRate() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetTxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxRate(::grpc::ServerContext* context, ::flexsdr::RateRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::RateResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetRxFreq() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetRxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRxFreq(::grpc::ServerContext* context, ::flexsdr::FrequencyRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::FrequencyResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRxFreq() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetRxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxFreq(::grpc::ServerContext* context, ::flexsdr::ChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::FrequencyValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetTxFreq() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetTxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTxFreq(::grpc::ServerContext* context, ::flexsdr::FrequencyRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::FrequencyResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTxFreq() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetTxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxFreq(::grpc::ServerContext* context, ::flexsdr::ChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::flexsdr::FrequencyValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDeviceInfo<WithAsyncMethod_SetClockRate<WithAsyncMethod_GetClockRate<WithAsyncMethod_SetRxGain<WithAsyncMethod_GetRxGain<WithAsyncMethod_SetTxGain<WithAsyncMethod_GetTxGain<WithAsyncMethod_SetRxRate<WithAsyncMethod_GetRxRate<WithAsyncMethod_SetTxRate<WithAsyncMethod_GetTxRate<WithAsyncMethod_SetRxFreq<WithAsyncMethod_GetRxFreq<WithAsyncMethod_SetTxFreq<WithAsyncMethod_GetTxFreq<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetClockRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetClockRate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetClockRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClockRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetClockRate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetClockRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetRxGain() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetRxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRxGain() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetRxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetTxGain() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetTxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTxGain() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetTxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetRxRate() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetRxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRxRate() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetRxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetTxRate() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetTxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTxRate() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetTxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetRxFreq() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetRxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRxFreq() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetRxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetTxFreq() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetTxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTxFreq() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetTxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetClockRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetClockRate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetClockRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetClockRate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClockRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetClockRate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetClockRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClockRate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetRxGain() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetRxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRxGain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRxGain() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetRxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxGain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetTxGain() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetTxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTxGain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTxGain() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetTxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxGain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetRxRate() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetRxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRxRate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRxRate() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetRxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxRate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetTxRate() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetTxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTxRate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTxRate() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetTxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxRate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetRxFreq() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetRxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRxFreq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRxFreq() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetRxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxFreq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetTxFreq() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SetTxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTxFreq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTxFreq() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetTxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxFreq(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::DeviceInfoRequest, ::flexsdr::DeviceInfoResponse>(std::bind(&WithStreamedUnaryMethod_GetDeviceInfo<BaseClass>::StreamedGetDeviceInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* context, const ::flexsdr::DeviceInfoRequest* request, ::flexsdr::DeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::DeviceInfoRequest,::flexsdr::DeviceInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetClockRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetClockRate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::ClockRateRequestParams, ::flexsdr::ClockRateResponseParams>(std::bind(&WithStreamedUnaryMethod_SetClockRate<BaseClass>::StreamedSetClockRate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetClockRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetClockRate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::ClockRateRequestParams,::flexsdr::ClockRateResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClockRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetClockRate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::ClockRateRequestParams, ::flexsdr::ClockRateResponseParams>(std::bind(&WithStreamedUnaryMethod_GetClockRate<BaseClass>::StreamedGetClockRate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetClockRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClockRate(::grpc::ServerContext* context, const ::flexsdr::ClockRateRequestParams* request, ::flexsdr::ClockRateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClockRate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::ClockRateRequestParams,::flexsdr::ClockRateResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetRxGain() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::GainRequestParams, ::flexsdr::GainResponseParams>(std::bind(&WithStreamedUnaryMethod_SetRxGain<BaseClass>::StreamedSetRxGain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetRxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRxGain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::GainRequestParams,::flexsdr::GainResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRxGain() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::GainRequestParams, ::flexsdr::GainResponseParams>(std::bind(&WithStreamedUnaryMethod_GetRxGain<BaseClass>::StreamedGetRxGain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRxGain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::GainRequestParams,::flexsdr::GainResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetTxGain() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::GainRequestParams, ::flexsdr::GainResponseParams>(std::bind(&WithStreamedUnaryMethod_SetTxGain<BaseClass>::StreamedSetTxGain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetTxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTxGain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::GainRequestParams,::flexsdr::GainResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxGain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTxGain() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::GainRequestParams, ::flexsdr::GainResponseParams>(std::bind(&WithStreamedUnaryMethod_GetTxGain<BaseClass>::StreamedGetTxGain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTxGain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxGain(::grpc::ServerContext* context, const ::flexsdr::GainRequestParams* request, ::flexsdr::GainResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxGain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::GainRequestParams,::flexsdr::GainResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetRxRate() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::RateRequestParams, ::flexsdr::RateResponseParams>(std::bind(&WithStreamedUnaryMethod_SetRxRate<BaseClass>::StreamedSetRxRate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetRxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRxRate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::RateRequestParams,::flexsdr::RateResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRxRate() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::RateRequestParams, ::flexsdr::RateResponseParams>(std::bind(&WithStreamedUnaryMethod_GetRxRate<BaseClass>::StreamedGetRxRate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRxRate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::RateRequestParams,::flexsdr::RateResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetTxRate() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::RateRequestParams, ::flexsdr::RateResponseParams>(std::bind(&WithStreamedUnaryMethod_SetTxRate<BaseClass>::StreamedSetTxRate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetTxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTxRate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::RateRequestParams,::flexsdr::RateResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTxRate() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::RateRequestParams, ::flexsdr::RateResponseParams>(std::bind(&WithStreamedUnaryMethod_GetTxRate<BaseClass>::StreamedGetTxRate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTxRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxRate(::grpc::ServerContext* context, const ::flexsdr::RateRequestParams* request, ::flexsdr::RateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxRate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::RateRequestParams,::flexsdr::RateResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetRxFreq() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::FrequencyRequestParams, ::flexsdr::FrequencyResponseParams>(std::bind(&WithStreamedUnaryMethod_SetRxFreq<BaseClass>::StreamedSetRxFreq, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetRxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRxFreq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::FrequencyRequestParams,::flexsdr::FrequencyResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRxFreq() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::ChannelRequest, ::flexsdr::FrequencyValue>(std::bind(&WithStreamedUnaryMethod_GetRxFreq<BaseClass>::StreamedGetRxFreq, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRxFreq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::ChannelRequest,::flexsdr::FrequencyValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetTxFreq() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::FrequencyRequestParams, ::flexsdr::FrequencyResponseParams>(std::bind(&WithStreamedUnaryMethod_SetTxFreq<BaseClass>::StreamedSetTxFreq, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetTxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTxFreq(::grpc::ServerContext* context, const ::flexsdr::FrequencyRequestParams* request, ::flexsdr::FrequencyResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTxFreq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::FrequencyRequestParams,::flexsdr::FrequencyResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxFreq : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTxFreq() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::flexsdr::ChannelRequest, ::flexsdr::FrequencyValue>(std::bind(&WithStreamedUnaryMethod_GetTxFreq<BaseClass>::StreamedGetTxFreq, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTxFreq() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxFreq(::grpc::ServerContext* context, const ::flexsdr::ChannelRequest* request, ::flexsdr::FrequencyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxFreq(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flexsdr::ChannelRequest,::flexsdr::FrequencyValue>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDeviceInfo<WithStreamedUnaryMethod_SetClockRate<WithStreamedUnaryMethod_GetClockRate<WithStreamedUnaryMethod_SetRxGain<WithStreamedUnaryMethod_GetRxGain<WithStreamedUnaryMethod_SetTxGain<WithStreamedUnaryMethod_GetTxGain<WithStreamedUnaryMethod_SetRxRate<WithStreamedUnaryMethod_GetRxRate<WithStreamedUnaryMethod_SetTxRate<WithStreamedUnaryMethod_GetTxRate<WithStreamedUnaryMethod_SetRxFreq<WithStreamedUnaryMethod_GetRxFreq<WithStreamedUnaryMethod_SetTxFreq<WithStreamedUnaryMethod_GetTxFreq<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDeviceInfo<WithStreamedUnaryMethod_SetClockRate<WithStreamedUnaryMethod_GetClockRate<WithStreamedUnaryMethod_SetRxGain<WithStreamedUnaryMethod_GetRxGain<WithStreamedUnaryMethod_SetTxGain<WithStreamedUnaryMethod_GetTxGain<WithStreamedUnaryMethod_SetRxRate<WithStreamedUnaryMethod_GetRxRate<WithStreamedUnaryMethod_SetTxRate<WithStreamedUnaryMethod_GetTxRate<WithStreamedUnaryMethod_SetRxFreq<WithStreamedUnaryMethod_GetRxFreq<WithStreamedUnaryMethod_SetTxFreq<WithStreamedUnaryMethod_GetTxFreq<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace flexsdr


#endif  // GRPC_flexsdr_2eproto__INCLUDED
