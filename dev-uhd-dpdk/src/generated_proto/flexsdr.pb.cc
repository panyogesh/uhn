// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flexsdr.proto

#include "flexsdr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_flexsdr_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flexsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChannelRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flexsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TuneRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flexsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TuneResult;
}  // namespace protobuf_flexsdr_2eproto
namespace flexsdr {
class ChannelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelRequest>
      _instance;
} _ChannelRequest_default_instance_;
class ClockRateRequestParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClockRateRequestParams>
      _instance;
} _ClockRateRequestParams_default_instance_;
class ClockRateResponseParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClockRateResponseParams>
      _instance;
} _ClockRateResponseParams_default_instance_;
class GainRequestParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GainRequestParams>
      _instance;
} _GainRequestParams_default_instance_;
class GainResponseParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GainResponseParams>
      _instance;
} _GainResponseParams_default_instance_;
class RateRequestParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RateRequestParams>
      _instance;
} _RateRequestParams_default_instance_;
class RateResponseParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RateResponseParams>
      _instance;
} _RateResponseParams_default_instance_;
class TuneRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TuneRequest>
      _instance;
} _TuneRequest_default_instance_;
class TuneResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TuneResult>
      _instance;
} _TuneResult_default_instance_;
class FrequencyRequestParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrequencyRequestParams>
      _instance;
} _FrequencyRequestParams_default_instance_;
class FrequencyResponseParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrequencyResponseParams>
      _instance;
} _FrequencyResponseParams_default_instance_;
class FrequencyValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrequencyValue>
      _instance;
} _FrequencyValue_default_instance_;
class DeviceInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfoRequest>
      _instance;
} _DeviceInfoRequest_default_instance_;
class DeviceInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfoResponse>
      _instance;
} _DeviceInfoResponse_default_instance_;
}  // namespace flexsdr
namespace protobuf_flexsdr_2eproto {
static void InitDefaultsChannelRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_ChannelRequest_default_instance_;
    new (ptr) ::flexsdr::ChannelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::ChannelRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChannelRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChannelRequest}, {}};

static void InitDefaultsClockRateRequestParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_ClockRateRequestParams_default_instance_;
    new (ptr) ::flexsdr::ClockRateRequestParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::ClockRateRequestParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClockRateRequestParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClockRateRequestParams}, {}};

static void InitDefaultsClockRateResponseParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_ClockRateResponseParams_default_instance_;
    new (ptr) ::flexsdr::ClockRateResponseParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::ClockRateResponseParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClockRateResponseParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClockRateResponseParams}, {}};

static void InitDefaultsGainRequestParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_GainRequestParams_default_instance_;
    new (ptr) ::flexsdr::GainRequestParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::GainRequestParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GainRequestParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGainRequestParams}, {}};

static void InitDefaultsGainResponseParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_GainResponseParams_default_instance_;
    new (ptr) ::flexsdr::GainResponseParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::GainResponseParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GainResponseParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGainResponseParams}, {}};

static void InitDefaultsRateRequestParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_RateRequestParams_default_instance_;
    new (ptr) ::flexsdr::RateRequestParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::RateRequestParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RateRequestParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRateRequestParams}, {}};

static void InitDefaultsRateResponseParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_RateResponseParams_default_instance_;
    new (ptr) ::flexsdr::RateResponseParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::RateResponseParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RateResponseParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRateResponseParams}, {}};

static void InitDefaultsTuneRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_TuneRequest_default_instance_;
    new (ptr) ::flexsdr::TuneRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::TuneRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TuneRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTuneRequest}, {}};

static void InitDefaultsTuneResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_TuneResult_default_instance_;
    new (ptr) ::flexsdr::TuneResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::TuneResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TuneResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTuneResult}, {}};

static void InitDefaultsFrequencyRequestParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_FrequencyRequestParams_default_instance_;
    new (ptr) ::flexsdr::FrequencyRequestParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::FrequencyRequestParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FrequencyRequestParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFrequencyRequestParams}, {
      &protobuf_flexsdr_2eproto::scc_info_TuneRequest.base,
      &protobuf_flexsdr_2eproto::scc_info_ChannelRequest.base,}};

static void InitDefaultsFrequencyResponseParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_FrequencyResponseParams_default_instance_;
    new (ptr) ::flexsdr::FrequencyResponseParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::FrequencyResponseParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FrequencyResponseParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFrequencyResponseParams}, {
      &protobuf_flexsdr_2eproto::scc_info_TuneResult.base,}};

static void InitDefaultsFrequencyValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_FrequencyValue_default_instance_;
    new (ptr) ::flexsdr::FrequencyValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::FrequencyValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FrequencyValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrequencyValue}, {}};

static void InitDefaultsDeviceInfoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_DeviceInfoRequest_default_instance_;
    new (ptr) ::flexsdr::DeviceInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::DeviceInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfoRequest}, {}};

static void InitDefaultsDeviceInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flexsdr::_DeviceInfoResponse_default_instance_;
    new (ptr) ::flexsdr::DeviceInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flexsdr::DeviceInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfoResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClockRateRequestParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClockRateResponseParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GainRequestParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GainResponseParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RateRequestParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RateResponseParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TuneRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TuneResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrequencyRequestParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrequencyResponseParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrequencyValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfoResponse.base);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ChannelRequest, chan_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ClockRateRequestParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ClockRateRequestParams, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ClockRateRequestParams, rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ClockRateResponseParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ClockRateResponseParams, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ClockRateResponseParams, actual_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::ClockRateResponseParams, error_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::GainRequestParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::GainRequestParams, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::GainRequestParams, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::GainRequestParams, chan_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::GainResponseParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::GainResponseParams, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::GainResponseParams, actual_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::GainResponseParams, error_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::RateRequestParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::RateRequestParams, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::RateRequestParams, chan_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::RateResponseParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::RateResponseParams, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::RateResponseParams, actual_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::RateResponseParams, error_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneRequest, target_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneRequest, rf_freq_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneRequest, rf_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneRequest, dsp_freq_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneRequest, dsp_freq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneResult, clipped_rf_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneResult, target_rf_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneResult, actual_rf_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneResult, target_dsp_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::TuneResult, actual_dsp_freq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyRequestParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyRequestParams, tune_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyRequestParams, channel_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyResponseParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyResponseParams, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyResponseParams, tune_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyResponseParams, error_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyValue, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyValue, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::FrequencyValue, error_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, rx_antennas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, tx_antennas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, min_rx_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, max_rx_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, min_tx_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flexsdr::DeviceInfoResponse, max_tx_gain_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flexsdr::ChannelRequest)},
  { 6, -1, sizeof(::flexsdr::ClockRateRequestParams)},
  { 13, -1, sizeof(::flexsdr::ClockRateResponseParams)},
  { 21, -1, sizeof(::flexsdr::GainRequestParams)},
  { 29, -1, sizeof(::flexsdr::GainResponseParams)},
  { 37, -1, sizeof(::flexsdr::RateRequestParams)},
  { 44, -1, sizeof(::flexsdr::RateResponseParams)},
  { 52, -1, sizeof(::flexsdr::TuneRequest)},
  { 62, -1, sizeof(::flexsdr::TuneResult)},
  { 72, -1, sizeof(::flexsdr::FrequencyRequestParams)},
  { 79, -1, sizeof(::flexsdr::FrequencyResponseParams)},
  { 87, -1, sizeof(::flexsdr::FrequencyValue)},
  { 95, -1, sizeof(::flexsdr::DeviceInfoRequest)},
  { 100, -1, sizeof(::flexsdr::DeviceInfoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_ChannelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_ClockRateRequestParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_ClockRateResponseParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_GainRequestParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_GainResponseParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_RateRequestParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_RateResponseParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_TuneRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_TuneResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_FrequencyRequestParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_FrequencyResponseParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_FrequencyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_DeviceInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flexsdr::_DeviceInfoResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "flexsdr.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rflexsdr.proto\022\007flexsdr\"\036\n\016ChannelReque"
      "st\022\014\n\004chan\030\001 \001(\r\"G\n\026ClockRateRequestPara"
      "ms\022\037\n\004unit\030\001 \001(\0162\021.flexsdr.UnitType\022\014\n\004r"
      "ate\030\002 \001(\001\"V\n\027ClockRateResponseParams\022\017\n\007"
      "success\030\001 \001(\010\022\023\n\013actual_rate\030\002 \001(\001\022\025\n\rer"
      "ror_message\030\003 \001(\t\"=\n\021GainRequestParams\022\014"
      "\n\004gain\030\001 \001(\001\022\014\n\004name\030\002 \001(\t\022\014\n\004chan\030\003 \001(\r"
      "\"Q\n\022GainResponseParams\022\017\n\007success\030\001 \001(\010\022"
      "\023\n\013actual_gain\030\002 \001(\001\022\025\n\rerror_message\030\003 "
      "\001(\t\"/\n\021RateRequestParams\022\014\n\004rate\030\001 \001(\001\022\014"
      "\n\004chan\030\002 \001(\r\"Q\n\022RateResponseParams\022\017\n\007su"
      "ccess\030\001 \001(\010\022\023\n\013actual_rate\030\002 \001(\001\022\025\n\rerro"
      "r_message\030\003 \001(\t\"\357\001\n\013TuneRequest\022\023\n\013targe"
      "t_freq\030\001 \001(\001\0223\n\016rf_freq_policy\030\002 \001(\0162\033.f"
      "lexsdr.TuneRequest.Policy\022\017\n\007rf_freq\030\003 \001"
      "(\001\0224\n\017dsp_freq_policy\030\004 \001(\0162\033.flexsdr.Tu"
      "neRequest.Policy\022\020\n\010dsp_freq\030\005 \001(\001\"=\n\006Po"
      "licy\022\017\n\013POLICY_NONE\020\000\022\017\n\013POLICY_AUTO\020\001\022\021"
      "\n\rPOLICY_MANUAL\020\002\"\207\001\n\nTuneResult\022\027\n\017clip"
      "ped_rf_freq\030\001 \001(\001\022\026\n\016target_rf_freq\030\002 \001("
      "\001\022\026\n\016actual_rf_freq\030\003 \001(\001\022\027\n\017target_dsp_"
      "freq\030\004 \001(\001\022\027\n\017actual_dsp_freq\030\005 \001(\001\"v\n\026F"
      "requencyRequestParams\022*\n\014tune_request\030\001 "
      "\001(\0132\024.flexsdr.TuneRequest\0220\n\017channel_req"
      "uest\030\002 \001(\0132\027.flexsdr.ChannelRequest\"k\n\027F"
      "requencyResponseParams\022\017\n\007success\030\001 \001(\010\022"
      "(\n\013tune_result\030\002 \001(\0132\023.flexsdr.TuneResul"
      "t\022\025\n\rerror_message\030\003 \001(\t\"K\n\016FrequencyVal"
      "ue\022\017\n\007success\030\001 \001(\010\022\021\n\tfrequency\030\002 \001(\001\022\025"
      "\n\rerror_message\030\003 \001(\t\"\023\n\021DeviceInfoReque"
      "st\"\276\001\n\022DeviceInfoResponse\022\023\n\013device_name"
      "\030\001 \001(\t\022\025\n\rserial_number\030\002 \001(\t\022\023\n\013rx_ante"
      "nnas\030\003 \003(\t\022\023\n\013tx_antennas\030\004 \003(\t\022\023\n\013min_r"
      "x_gain\030\005 \001(\001\022\023\n\013max_rx_gain\030\006 \001(\001\022\023\n\013min"
      "_tx_gain\030\007 \001(\001\022\023\n\013max_tx_gain\030\010 \001(\001*E\n\010U"
      "nitType\022\020\n\014UNIT_INVALID\020\000\022\013\n\007UNIT_RX\020r\022\013"
      "\n\007UNIT_TX\020t\022\r\n\tUNIT_BOTH\020b2\354\010\n\016FlexSDRCo"
      "ntrol\022J\n\rGetDeviceInfo\022\032.flexsdr.DeviceI"
      "nfoRequest\032\033.flexsdr.DeviceInfoResponse\""
      "\000\022S\n\014SetClockRate\022\037.flexsdr.ClockRateReq"
      "uestParams\032 .flexsdr.ClockRateResponsePa"
      "rams\"\000\022S\n\014GetClockRate\022\037.flexsdr.ClockRa"
      "teRequestParams\032 .flexsdr.ClockRateRespo"
      "nseParams\"\000\022F\n\tSetRxGain\022\032.flexsdr.GainR"
      "equestParams\032\033.flexsdr.GainResponseParam"
      "s\"\000\022F\n\tGetRxGain\022\032.flexsdr.GainRequestPa"
      "rams\032\033.flexsdr.GainResponseParams\"\000\022F\n\tS"
      "etTxGain\022\032.flexsdr.GainRequestParams\032\033.f"
      "lexsdr.GainResponseParams\"\000\022F\n\tGetTxGain"
      "\022\032.flexsdr.GainRequestParams\032\033.flexsdr.G"
      "ainResponseParams\"\000\022F\n\tSetRxRate\022\032.flexs"
      "dr.RateRequestParams\032\033.flexsdr.RateRespo"
      "nseParams\"\000\022F\n\tGetRxRate\022\032.flexsdr.RateR"
      "equestParams\032\033.flexsdr.RateResponseParam"
      "s\"\000\022F\n\tSetTxRate\022\032.flexsdr.RateRequestPa"
      "rams\032\033.flexsdr.RateResponseParams\"\000\022F\n\tG"
      "etTxRate\022\032.flexsdr.RateRequestParams\032\033.f"
      "lexsdr.RateResponseParams\"\000\022P\n\tSetRxFreq"
      "\022\037.flexsdr.FrequencyRequestParams\032 .flex"
      "sdr.FrequencyResponseParams\"\000\022\?\n\tGetRxFr"
      "eq\022\027.flexsdr.ChannelRequest\032\027.flexsdr.Fr"
      "equencyValue\"\000\022P\n\tSetTxFreq\022\037.flexsdr.Fr"
      "equencyRequestParams\032 .flexsdr.Frequency"
      "ResponseParams\"\000\022\?\n\tGetTxFreq\022\027.flexsdr."
      "ChannelRequest\032\027.flexsdr.FrequencyValue\""
      "\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flexsdr.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flexsdr_2eproto
namespace flexsdr {
const ::google::protobuf::EnumDescriptor* TuneRequest_Policy_descriptor() {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexsdr_2eproto::file_level_enum_descriptors[0];
}
bool TuneRequest_Policy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TuneRequest_Policy TuneRequest::POLICY_NONE;
const TuneRequest_Policy TuneRequest::POLICY_AUTO;
const TuneRequest_Policy TuneRequest::POLICY_MANUAL;
const TuneRequest_Policy TuneRequest::Policy_MIN;
const TuneRequest_Policy TuneRequest::Policy_MAX;
const int TuneRequest::Policy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UnitType_descriptor() {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexsdr_2eproto::file_level_enum_descriptors[1];
}
bool UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 98:
    case 114:
    case 116:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ChannelRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelRequest::kChanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelRequest::ChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_ChannelRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.ChannelRequest)
}
ChannelRequest::ChannelRequest(const ChannelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chan_ = from.chan_;
  // @@protoc_insertion_point(copy_constructor:flexsdr.ChannelRequest)
}

void ChannelRequest::SharedCtor() {
  chan_ = 0u;
}

ChannelRequest::~ChannelRequest() {
  // @@protoc_insertion_point(destructor:flexsdr.ChannelRequest)
  SharedDtor();
}

void ChannelRequest::SharedDtor() {
}

void ChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelRequest::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelRequest& ChannelRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_ChannelRequest.base);
  return *internal_default_instance();
}


void ChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.ChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chan_ = 0u;
  _internal_metadata_.Clear();
}

bool ChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.ChannelRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 chan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.ChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.ChannelRequest)
  return false;
#undef DO_
}

void ChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.ChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chan = 1;
  if (this->chan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chan(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.ChannelRequest)
}

::google::protobuf::uint8* ChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.ChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chan = 1;
  if (this->chan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chan(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.ChannelRequest)
  return target;
}

size_t ChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.ChannelRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 chan = 1;
  if (this->chan() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chan());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.ChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.ChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.ChannelRequest)
    MergeFrom(*source);
  }
}

void ChannelRequest::MergeFrom(const ChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.ChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chan() != 0) {
    set_chan(from.chan());
  }
}

void ChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.ChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelRequest::CopyFrom(const ChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.ChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRequest::IsInitialized() const {
  return true;
}

void ChannelRequest::Swap(ChannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelRequest::InternalSwap(ChannelRequest* other) {
  using std::swap;
  swap(chan_, other->chan_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelRequest::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClockRateRequestParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClockRateRequestParams::kUnitFieldNumber;
const int ClockRateRequestParams::kRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClockRateRequestParams::ClockRateRequestParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_ClockRateRequestParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.ClockRateRequestParams)
}
ClockRateRequestParams::ClockRateRequestParams(const ClockRateRequestParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rate_, &from.rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&rate_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.ClockRateRequestParams)
}

void ClockRateRequestParams::SharedCtor() {
  ::memset(&rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(unit_));
}

ClockRateRequestParams::~ClockRateRequestParams() {
  // @@protoc_insertion_point(destructor:flexsdr.ClockRateRequestParams)
  SharedDtor();
}

void ClockRateRequestParams::SharedDtor() {
}

void ClockRateRequestParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClockRateRequestParams::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClockRateRequestParams& ClockRateRequestParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_ClockRateRequestParams.base);
  return *internal_default_instance();
}


void ClockRateRequestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.ClockRateRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(unit_));
  _internal_metadata_.Clear();
}

bool ClockRateRequestParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.ClockRateRequestParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flexsdr.UnitType unit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unit(static_cast< ::flexsdr::UnitType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.ClockRateRequestParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.ClockRateRequestParams)
  return false;
#undef DO_
}

void ClockRateRequestParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.ClockRateRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flexsdr.UnitType unit = 1;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->unit(), output);
  }

  // double rate = 2;
  if (this->rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.ClockRateRequestParams)
}

::google::protobuf::uint8* ClockRateRequestParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.ClockRateRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flexsdr.UnitType unit = 1;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->unit(), target);
  }

  // double rate = 2;
  if (this->rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.ClockRateRequestParams)
  return target;
}

size_t ClockRateRequestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.ClockRateRequestParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double rate = 2;
  if (this->rate() != 0) {
    total_size += 1 + 8;
  }

  // .flexsdr.UnitType unit = 1;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClockRateRequestParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.ClockRateRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ClockRateRequestParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClockRateRequestParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.ClockRateRequestParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.ClockRateRequestParams)
    MergeFrom(*source);
  }
}

void ClockRateRequestParams::MergeFrom(const ClockRateRequestParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.ClockRateRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rate() != 0) {
    set_rate(from.rate());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
}

void ClockRateRequestParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.ClockRateRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClockRateRequestParams::CopyFrom(const ClockRateRequestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.ClockRateRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClockRateRequestParams::IsInitialized() const {
  return true;
}

void ClockRateRequestParams::Swap(ClockRateRequestParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClockRateRequestParams::InternalSwap(ClockRateRequestParams* other) {
  using std::swap;
  swap(rate_, other->rate_);
  swap(unit_, other->unit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClockRateRequestParams::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClockRateResponseParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClockRateResponseParams::kSuccessFieldNumber;
const int ClockRateResponseParams::kActualRateFieldNumber;
const int ClockRateResponseParams::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClockRateResponseParams::ClockRateResponseParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_ClockRateResponseParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.ClockRateResponseParams)
}
ClockRateResponseParams::ClockRateResponseParams(const ClockRateResponseParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&actual_rate_, &from.actual_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&actual_rate_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.ClockRateResponseParams)
}

void ClockRateResponseParams::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actual_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actual_rate_)) + sizeof(success_));
}

ClockRateResponseParams::~ClockRateResponseParams() {
  // @@protoc_insertion_point(destructor:flexsdr.ClockRateResponseParams)
  SharedDtor();
}

void ClockRateResponseParams::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClockRateResponseParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClockRateResponseParams::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClockRateResponseParams& ClockRateResponseParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_ClockRateResponseParams.base);
  return *internal_default_instance();
}


void ClockRateResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.ClockRateResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actual_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actual_rate_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

bool ClockRateResponseParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.ClockRateResponseParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double actual_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &actual_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.ClockRateResponseParams.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.ClockRateResponseParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.ClockRateResponseParams)
  return false;
#undef DO_
}

void ClockRateResponseParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.ClockRateResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // double actual_rate = 2;
  if (this->actual_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->actual_rate(), output);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.ClockRateResponseParams.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.ClockRateResponseParams)
}

::google::protobuf::uint8* ClockRateResponseParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.ClockRateResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // double actual_rate = 2;
  if (this->actual_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->actual_rate(), target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.ClockRateResponseParams.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.ClockRateResponseParams)
  return target;
}

size_t ClockRateResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.ClockRateResponseParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // double actual_rate = 2;
  if (this->actual_rate() != 0) {
    total_size += 1 + 8;
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClockRateResponseParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.ClockRateResponseParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ClockRateResponseParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClockRateResponseParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.ClockRateResponseParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.ClockRateResponseParams)
    MergeFrom(*source);
  }
}

void ClockRateResponseParams::MergeFrom(const ClockRateResponseParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.ClockRateResponseParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.actual_rate() != 0) {
    set_actual_rate(from.actual_rate());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void ClockRateResponseParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.ClockRateResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClockRateResponseParams::CopyFrom(const ClockRateResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.ClockRateResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClockRateResponseParams::IsInitialized() const {
  return true;
}

void ClockRateResponseParams::Swap(ClockRateResponseParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClockRateResponseParams::InternalSwap(ClockRateResponseParams* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actual_rate_, other->actual_rate_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClockRateResponseParams::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GainRequestParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainRequestParams::kGainFieldNumber;
const int GainRequestParams::kNameFieldNumber;
const int GainRequestParams::kChanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainRequestParams::GainRequestParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_GainRequestParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.GainRequestParams)
}
GainRequestParams::GainRequestParams(const GainRequestParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&gain_, &from.gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&chan_) -
    reinterpret_cast<char*>(&gain_)) + sizeof(chan_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.GainRequestParams)
}

void GainRequestParams::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chan_) -
      reinterpret_cast<char*>(&gain_)) + sizeof(chan_));
}

GainRequestParams::~GainRequestParams() {
  // @@protoc_insertion_point(destructor:flexsdr.GainRequestParams)
  SharedDtor();
}

void GainRequestParams::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GainRequestParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GainRequestParams::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainRequestParams& GainRequestParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_GainRequestParams.base);
  return *internal_default_instance();
}


void GainRequestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.GainRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chan_) -
      reinterpret_cast<char*>(&gain_)) + sizeof(chan_));
  _internal_metadata_.Clear();
}

bool GainRequestParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.GainRequestParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double gain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.GainRequestParams.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chan = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.GainRequestParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.GainRequestParams)
  return false;
#undef DO_
}

void GainRequestParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.GainRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double gain = 1;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gain(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.GainRequestParams.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 chan = 3;
  if (this->chan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chan(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.GainRequestParams)
}

::google::protobuf::uint8* GainRequestParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.GainRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double gain = 1;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->gain(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.GainRequestParams.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // uint32 chan = 3;
  if (this->chan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chan(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.GainRequestParams)
  return target;
}

size_t GainRequestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.GainRequestParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double gain = 1;
  if (this->gain() != 0) {
    total_size += 1 + 8;
  }

  // uint32 chan = 3;
  if (this->chan() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chan());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GainRequestParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.GainRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GainRequestParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainRequestParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.GainRequestParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.GainRequestParams)
    MergeFrom(*source);
  }
}

void GainRequestParams::MergeFrom(const GainRequestParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.GainRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
  if (from.chan() != 0) {
    set_chan(from.chan());
  }
}

void GainRequestParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.GainRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainRequestParams::CopyFrom(const GainRequestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.GainRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainRequestParams::IsInitialized() const {
  return true;
}

void GainRequestParams::Swap(GainRequestParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainRequestParams::InternalSwap(GainRequestParams* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gain_, other->gain_);
  swap(chan_, other->chan_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GainRequestParams::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GainResponseParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainResponseParams::kSuccessFieldNumber;
const int GainResponseParams::kActualGainFieldNumber;
const int GainResponseParams::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainResponseParams::GainResponseParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_GainResponseParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.GainResponseParams)
}
GainResponseParams::GainResponseParams(const GainResponseParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&actual_gain_, &from.actual_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&actual_gain_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.GainResponseParams)
}

void GainResponseParams::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actual_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actual_gain_)) + sizeof(success_));
}

GainResponseParams::~GainResponseParams() {
  // @@protoc_insertion_point(destructor:flexsdr.GainResponseParams)
  SharedDtor();
}

void GainResponseParams::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GainResponseParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GainResponseParams::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainResponseParams& GainResponseParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_GainResponseParams.base);
  return *internal_default_instance();
}


void GainResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.GainResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actual_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actual_gain_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

bool GainResponseParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.GainResponseParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double actual_gain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &actual_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.GainResponseParams.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.GainResponseParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.GainResponseParams)
  return false;
#undef DO_
}

void GainResponseParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.GainResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // double actual_gain = 2;
  if (this->actual_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->actual_gain(), output);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.GainResponseParams.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.GainResponseParams)
}

::google::protobuf::uint8* GainResponseParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.GainResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // double actual_gain = 2;
  if (this->actual_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->actual_gain(), target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.GainResponseParams.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.GainResponseParams)
  return target;
}

size_t GainResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.GainResponseParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // double actual_gain = 2;
  if (this->actual_gain() != 0) {
    total_size += 1 + 8;
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GainResponseParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.GainResponseParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GainResponseParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainResponseParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.GainResponseParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.GainResponseParams)
    MergeFrom(*source);
  }
}

void GainResponseParams::MergeFrom(const GainResponseParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.GainResponseParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.actual_gain() != 0) {
    set_actual_gain(from.actual_gain());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void GainResponseParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.GainResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainResponseParams::CopyFrom(const GainResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.GainResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainResponseParams::IsInitialized() const {
  return true;
}

void GainResponseParams::Swap(GainResponseParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainResponseParams::InternalSwap(GainResponseParams* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actual_gain_, other->actual_gain_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GainResponseParams::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RateRequestParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateRequestParams::kRateFieldNumber;
const int RateRequestParams::kChanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateRequestParams::RateRequestParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_RateRequestParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.RateRequestParams)
}
RateRequestParams::RateRequestParams(const RateRequestParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rate_, &from.rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&chan_) -
    reinterpret_cast<char*>(&rate_)) + sizeof(chan_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.RateRequestParams)
}

void RateRequestParams::SharedCtor() {
  ::memset(&rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chan_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(chan_));
}

RateRequestParams::~RateRequestParams() {
  // @@protoc_insertion_point(destructor:flexsdr.RateRequestParams)
  SharedDtor();
}

void RateRequestParams::SharedDtor() {
}

void RateRequestParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RateRequestParams::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateRequestParams& RateRequestParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_RateRequestParams.base);
  return *internal_default_instance();
}


void RateRequestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.RateRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chan_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(chan_));
  _internal_metadata_.Clear();
}

bool RateRequestParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.RateRequestParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chan = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.RateRequestParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.RateRequestParams)
  return false;
#undef DO_
}

void RateRequestParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.RateRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate = 1;
  if (this->rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rate(), output);
  }

  // uint32 chan = 2;
  if (this->chan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chan(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.RateRequestParams)
}

::google::protobuf::uint8* RateRequestParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.RateRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate = 1;
  if (this->rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rate(), target);
  }

  // uint32 chan = 2;
  if (this->chan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chan(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.RateRequestParams)
  return target;
}

size_t RateRequestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.RateRequestParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double rate = 1;
  if (this->rate() != 0) {
    total_size += 1 + 8;
  }

  // uint32 chan = 2;
  if (this->chan() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chan());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateRequestParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.RateRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  const RateRequestParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateRequestParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.RateRequestParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.RateRequestParams)
    MergeFrom(*source);
  }
}

void RateRequestParams::MergeFrom(const RateRequestParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.RateRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rate() != 0) {
    set_rate(from.rate());
  }
  if (from.chan() != 0) {
    set_chan(from.chan());
  }
}

void RateRequestParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.RateRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateRequestParams::CopyFrom(const RateRequestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.RateRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateRequestParams::IsInitialized() const {
  return true;
}

void RateRequestParams::Swap(RateRequestParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateRequestParams::InternalSwap(RateRequestParams* other) {
  using std::swap;
  swap(rate_, other->rate_);
  swap(chan_, other->chan_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RateRequestParams::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RateResponseParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateResponseParams::kSuccessFieldNumber;
const int RateResponseParams::kActualRateFieldNumber;
const int RateResponseParams::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateResponseParams::RateResponseParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_RateResponseParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.RateResponseParams)
}
RateResponseParams::RateResponseParams(const RateResponseParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&actual_rate_, &from.actual_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&actual_rate_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.RateResponseParams)
}

void RateResponseParams::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actual_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actual_rate_)) + sizeof(success_));
}

RateResponseParams::~RateResponseParams() {
  // @@protoc_insertion_point(destructor:flexsdr.RateResponseParams)
  SharedDtor();
}

void RateResponseParams::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RateResponseParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RateResponseParams::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateResponseParams& RateResponseParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_RateResponseParams.base);
  return *internal_default_instance();
}


void RateResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.RateResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actual_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actual_rate_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

bool RateResponseParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.RateResponseParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double actual_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &actual_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.RateResponseParams.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.RateResponseParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.RateResponseParams)
  return false;
#undef DO_
}

void RateResponseParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.RateResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // double actual_rate = 2;
  if (this->actual_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->actual_rate(), output);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.RateResponseParams.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.RateResponseParams)
}

::google::protobuf::uint8* RateResponseParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.RateResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // double actual_rate = 2;
  if (this->actual_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->actual_rate(), target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.RateResponseParams.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.RateResponseParams)
  return target;
}

size_t RateResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.RateResponseParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // double actual_rate = 2;
  if (this->actual_rate() != 0) {
    total_size += 1 + 8;
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateResponseParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.RateResponseParams)
  GOOGLE_DCHECK_NE(&from, this);
  const RateResponseParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateResponseParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.RateResponseParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.RateResponseParams)
    MergeFrom(*source);
  }
}

void RateResponseParams::MergeFrom(const RateResponseParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.RateResponseParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.actual_rate() != 0) {
    set_actual_rate(from.actual_rate());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void RateResponseParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.RateResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateResponseParams::CopyFrom(const RateResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.RateResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateResponseParams::IsInitialized() const {
  return true;
}

void RateResponseParams::Swap(RateResponseParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateResponseParams::InternalSwap(RateResponseParams* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actual_rate_, other->actual_rate_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RateResponseParams::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TuneRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TuneRequest::kTargetFreqFieldNumber;
const int TuneRequest::kRfFreqPolicyFieldNumber;
const int TuneRequest::kRfFreqFieldNumber;
const int TuneRequest::kDspFreqPolicyFieldNumber;
const int TuneRequest::kDspFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TuneRequest::TuneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_TuneRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.TuneRequest)
}
TuneRequest::TuneRequest(const TuneRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_freq_, &from.target_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&dsp_freq_) -
    reinterpret_cast<char*>(&target_freq_)) + sizeof(dsp_freq_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.TuneRequest)
}

void TuneRequest::SharedCtor() {
  ::memset(&target_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dsp_freq_) -
      reinterpret_cast<char*>(&target_freq_)) + sizeof(dsp_freq_));
}

TuneRequest::~TuneRequest() {
  // @@protoc_insertion_point(destructor:flexsdr.TuneRequest)
  SharedDtor();
}

void TuneRequest::SharedDtor() {
}

void TuneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TuneRequest::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TuneRequest& TuneRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_TuneRequest.base);
  return *internal_default_instance();
}


void TuneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.TuneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dsp_freq_) -
      reinterpret_cast<char*>(&target_freq_)) + sizeof(dsp_freq_));
  _internal_metadata_.Clear();
}

bool TuneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.TuneRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double target_freq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flexsdr.TuneRequest.Policy rf_freq_policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rf_freq_policy(static_cast< ::flexsdr::TuneRequest_Policy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rf_freq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rf_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flexsdr.TuneRequest.Policy dsp_freq_policy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dsp_freq_policy(static_cast< ::flexsdr::TuneRequest_Policy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dsp_freq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dsp_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.TuneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.TuneRequest)
  return false;
#undef DO_
}

void TuneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.TuneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double target_freq = 1;
  if (this->target_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->target_freq(), output);
  }

  // .flexsdr.TuneRequest.Policy rf_freq_policy = 2;
  if (this->rf_freq_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rf_freq_policy(), output);
  }

  // double rf_freq = 3;
  if (this->rf_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rf_freq(), output);
  }

  // .flexsdr.TuneRequest.Policy dsp_freq_policy = 4;
  if (this->dsp_freq_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dsp_freq_policy(), output);
  }

  // double dsp_freq = 5;
  if (this->dsp_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dsp_freq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.TuneRequest)
}

::google::protobuf::uint8* TuneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.TuneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double target_freq = 1;
  if (this->target_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->target_freq(), target);
  }

  // .flexsdr.TuneRequest.Policy rf_freq_policy = 2;
  if (this->rf_freq_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rf_freq_policy(), target);
  }

  // double rf_freq = 3;
  if (this->rf_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rf_freq(), target);
  }

  // .flexsdr.TuneRequest.Policy dsp_freq_policy = 4;
  if (this->dsp_freq_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dsp_freq_policy(), target);
  }

  // double dsp_freq = 5;
  if (this->dsp_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dsp_freq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.TuneRequest)
  return target;
}

size_t TuneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.TuneRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double target_freq = 1;
  if (this->target_freq() != 0) {
    total_size += 1 + 8;
  }

  // double rf_freq = 3;
  if (this->rf_freq() != 0) {
    total_size += 1 + 8;
  }

  // .flexsdr.TuneRequest.Policy rf_freq_policy = 2;
  if (this->rf_freq_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rf_freq_policy());
  }

  // .flexsdr.TuneRequest.Policy dsp_freq_policy = 4;
  if (this->dsp_freq_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dsp_freq_policy());
  }

  // double dsp_freq = 5;
  if (this->dsp_freq() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.TuneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TuneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TuneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.TuneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.TuneRequest)
    MergeFrom(*source);
  }
}

void TuneRequest::MergeFrom(const TuneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.TuneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_freq() != 0) {
    set_target_freq(from.target_freq());
  }
  if (from.rf_freq() != 0) {
    set_rf_freq(from.rf_freq());
  }
  if (from.rf_freq_policy() != 0) {
    set_rf_freq_policy(from.rf_freq_policy());
  }
  if (from.dsp_freq_policy() != 0) {
    set_dsp_freq_policy(from.dsp_freq_policy());
  }
  if (from.dsp_freq() != 0) {
    set_dsp_freq(from.dsp_freq());
  }
}

void TuneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.TuneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuneRequest::CopyFrom(const TuneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.TuneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuneRequest::IsInitialized() const {
  return true;
}

void TuneRequest::Swap(TuneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TuneRequest::InternalSwap(TuneRequest* other) {
  using std::swap;
  swap(target_freq_, other->target_freq_);
  swap(rf_freq_, other->rf_freq_);
  swap(rf_freq_policy_, other->rf_freq_policy_);
  swap(dsp_freq_policy_, other->dsp_freq_policy_);
  swap(dsp_freq_, other->dsp_freq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TuneRequest::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TuneResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TuneResult::kClippedRfFreqFieldNumber;
const int TuneResult::kTargetRfFreqFieldNumber;
const int TuneResult::kActualRfFreqFieldNumber;
const int TuneResult::kTargetDspFreqFieldNumber;
const int TuneResult::kActualDspFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TuneResult::TuneResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_TuneResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.TuneResult)
}
TuneResult::TuneResult(const TuneResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clipped_rf_freq_, &from.clipped_rf_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&actual_dsp_freq_) -
    reinterpret_cast<char*>(&clipped_rf_freq_)) + sizeof(actual_dsp_freq_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.TuneResult)
}

void TuneResult::SharedCtor() {
  ::memset(&clipped_rf_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_dsp_freq_) -
      reinterpret_cast<char*>(&clipped_rf_freq_)) + sizeof(actual_dsp_freq_));
}

TuneResult::~TuneResult() {
  // @@protoc_insertion_point(destructor:flexsdr.TuneResult)
  SharedDtor();
}

void TuneResult::SharedDtor() {
}

void TuneResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TuneResult::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TuneResult& TuneResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_TuneResult.base);
  return *internal_default_instance();
}


void TuneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.TuneResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&clipped_rf_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_dsp_freq_) -
      reinterpret_cast<char*>(&clipped_rf_freq_)) + sizeof(actual_dsp_freq_));
  _internal_metadata_.Clear();
}

bool TuneResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.TuneResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double clipped_rf_freq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clipped_rf_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double target_rf_freq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_rf_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double actual_rf_freq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &actual_rf_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double target_dsp_freq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_dsp_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double actual_dsp_freq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &actual_dsp_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.TuneResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.TuneResult)
  return false;
#undef DO_
}

void TuneResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.TuneResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double clipped_rf_freq = 1;
  if (this->clipped_rf_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->clipped_rf_freq(), output);
  }

  // double target_rf_freq = 2;
  if (this->target_rf_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->target_rf_freq(), output);
  }

  // double actual_rf_freq = 3;
  if (this->actual_rf_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->actual_rf_freq(), output);
  }

  // double target_dsp_freq = 4;
  if (this->target_dsp_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->target_dsp_freq(), output);
  }

  // double actual_dsp_freq = 5;
  if (this->actual_dsp_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->actual_dsp_freq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.TuneResult)
}

::google::protobuf::uint8* TuneResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.TuneResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double clipped_rf_freq = 1;
  if (this->clipped_rf_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->clipped_rf_freq(), target);
  }

  // double target_rf_freq = 2;
  if (this->target_rf_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->target_rf_freq(), target);
  }

  // double actual_rf_freq = 3;
  if (this->actual_rf_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->actual_rf_freq(), target);
  }

  // double target_dsp_freq = 4;
  if (this->target_dsp_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->target_dsp_freq(), target);
  }

  // double actual_dsp_freq = 5;
  if (this->actual_dsp_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->actual_dsp_freq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.TuneResult)
  return target;
}

size_t TuneResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.TuneResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double clipped_rf_freq = 1;
  if (this->clipped_rf_freq() != 0) {
    total_size += 1 + 8;
  }

  // double target_rf_freq = 2;
  if (this->target_rf_freq() != 0) {
    total_size += 1 + 8;
  }

  // double actual_rf_freq = 3;
  if (this->actual_rf_freq() != 0) {
    total_size += 1 + 8;
  }

  // double target_dsp_freq = 4;
  if (this->target_dsp_freq() != 0) {
    total_size += 1 + 8;
  }

  // double actual_dsp_freq = 5;
  if (this->actual_dsp_freq() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuneResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.TuneResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TuneResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TuneResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.TuneResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.TuneResult)
    MergeFrom(*source);
  }
}

void TuneResult::MergeFrom(const TuneResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.TuneResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clipped_rf_freq() != 0) {
    set_clipped_rf_freq(from.clipped_rf_freq());
  }
  if (from.target_rf_freq() != 0) {
    set_target_rf_freq(from.target_rf_freq());
  }
  if (from.actual_rf_freq() != 0) {
    set_actual_rf_freq(from.actual_rf_freq());
  }
  if (from.target_dsp_freq() != 0) {
    set_target_dsp_freq(from.target_dsp_freq());
  }
  if (from.actual_dsp_freq() != 0) {
    set_actual_dsp_freq(from.actual_dsp_freq());
  }
}

void TuneResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.TuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuneResult::CopyFrom(const TuneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.TuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuneResult::IsInitialized() const {
  return true;
}

void TuneResult::Swap(TuneResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TuneResult::InternalSwap(TuneResult* other) {
  using std::swap;
  swap(clipped_rf_freq_, other->clipped_rf_freq_);
  swap(target_rf_freq_, other->target_rf_freq_);
  swap(actual_rf_freq_, other->actual_rf_freq_);
  swap(target_dsp_freq_, other->target_dsp_freq_);
  swap(actual_dsp_freq_, other->actual_dsp_freq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TuneResult::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrequencyRequestParams::InitAsDefaultInstance() {
  ::flexsdr::_FrequencyRequestParams_default_instance_._instance.get_mutable()->tune_request_ = const_cast< ::flexsdr::TuneRequest*>(
      ::flexsdr::TuneRequest::internal_default_instance());
  ::flexsdr::_FrequencyRequestParams_default_instance_._instance.get_mutable()->channel_request_ = const_cast< ::flexsdr::ChannelRequest*>(
      ::flexsdr::ChannelRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrequencyRequestParams::kTuneRequestFieldNumber;
const int FrequencyRequestParams::kChannelRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrequencyRequestParams::FrequencyRequestParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_FrequencyRequestParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.FrequencyRequestParams)
}
FrequencyRequestParams::FrequencyRequestParams(const FrequencyRequestParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tune_request()) {
    tune_request_ = new ::flexsdr::TuneRequest(*from.tune_request_);
  } else {
    tune_request_ = NULL;
  }
  if (from.has_channel_request()) {
    channel_request_ = new ::flexsdr::ChannelRequest(*from.channel_request_);
  } else {
    channel_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:flexsdr.FrequencyRequestParams)
}

void FrequencyRequestParams::SharedCtor() {
  ::memset(&tune_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_request_) -
      reinterpret_cast<char*>(&tune_request_)) + sizeof(channel_request_));
}

FrequencyRequestParams::~FrequencyRequestParams() {
  // @@protoc_insertion_point(destructor:flexsdr.FrequencyRequestParams)
  SharedDtor();
}

void FrequencyRequestParams::SharedDtor() {
  if (this != internal_default_instance()) delete tune_request_;
  if (this != internal_default_instance()) delete channel_request_;
}

void FrequencyRequestParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrequencyRequestParams::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrequencyRequestParams& FrequencyRequestParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_FrequencyRequestParams.base);
  return *internal_default_instance();
}


void FrequencyRequestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.FrequencyRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tune_request_ != NULL) {
    delete tune_request_;
  }
  tune_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && channel_request_ != NULL) {
    delete channel_request_;
  }
  channel_request_ = NULL;
  _internal_metadata_.Clear();
}

bool FrequencyRequestParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.FrequencyRequestParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flexsdr.TuneRequest tune_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tune_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flexsdr.ChannelRequest channel_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.FrequencyRequestParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.FrequencyRequestParams)
  return false;
#undef DO_
}

void FrequencyRequestParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.FrequencyRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flexsdr.TuneRequest tune_request = 1;
  if (this->has_tune_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tune_request(), output);
  }

  // .flexsdr.ChannelRequest channel_request = 2;
  if (this->has_channel_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_channel_request(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.FrequencyRequestParams)
}

::google::protobuf::uint8* FrequencyRequestParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.FrequencyRequestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flexsdr.TuneRequest tune_request = 1;
  if (this->has_tune_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tune_request(), deterministic, target);
  }

  // .flexsdr.ChannelRequest channel_request = 2;
  if (this->has_channel_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_channel_request(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.FrequencyRequestParams)
  return target;
}

size_t FrequencyRequestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.FrequencyRequestParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .flexsdr.TuneRequest tune_request = 1;
  if (this->has_tune_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tune_request_);
  }

  // .flexsdr.ChannelRequest channel_request = 2;
  if (this->has_channel_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *channel_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyRequestParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.FrequencyRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyRequestParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrequencyRequestParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.FrequencyRequestParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.FrequencyRequestParams)
    MergeFrom(*source);
  }
}

void FrequencyRequestParams::MergeFrom(const FrequencyRequestParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.FrequencyRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tune_request()) {
    mutable_tune_request()->::flexsdr::TuneRequest::MergeFrom(from.tune_request());
  }
  if (from.has_channel_request()) {
    mutable_channel_request()->::flexsdr::ChannelRequest::MergeFrom(from.channel_request());
  }
}

void FrequencyRequestParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.FrequencyRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyRequestParams::CopyFrom(const FrequencyRequestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.FrequencyRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyRequestParams::IsInitialized() const {
  return true;
}

void FrequencyRequestParams::Swap(FrequencyRequestParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrequencyRequestParams::InternalSwap(FrequencyRequestParams* other) {
  using std::swap;
  swap(tune_request_, other->tune_request_);
  swap(channel_request_, other->channel_request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrequencyRequestParams::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrequencyResponseParams::InitAsDefaultInstance() {
  ::flexsdr::_FrequencyResponseParams_default_instance_._instance.get_mutable()->tune_result_ = const_cast< ::flexsdr::TuneResult*>(
      ::flexsdr::TuneResult::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrequencyResponseParams::kSuccessFieldNumber;
const int FrequencyResponseParams::kTuneResultFieldNumber;
const int FrequencyResponseParams::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrequencyResponseParams::FrequencyResponseParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_FrequencyResponseParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.FrequencyResponseParams)
}
FrequencyResponseParams::FrequencyResponseParams(const FrequencyResponseParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_tune_result()) {
    tune_result_ = new ::flexsdr::TuneResult(*from.tune_result_);
  } else {
    tune_result_ = NULL;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:flexsdr.FrequencyResponseParams)
}

void FrequencyResponseParams::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tune_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&tune_result_)) + sizeof(success_));
}

FrequencyResponseParams::~FrequencyResponseParams() {
  // @@protoc_insertion_point(destructor:flexsdr.FrequencyResponseParams)
  SharedDtor();
}

void FrequencyResponseParams::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tune_result_;
}

void FrequencyResponseParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrequencyResponseParams::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrequencyResponseParams& FrequencyResponseParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_FrequencyResponseParams.base);
  return *internal_default_instance();
}


void FrequencyResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.FrequencyResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tune_result_ != NULL) {
    delete tune_result_;
  }
  tune_result_ = NULL;
  success_ = false;
  _internal_metadata_.Clear();
}

bool FrequencyResponseParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.FrequencyResponseParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flexsdr.TuneResult tune_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tune_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.FrequencyResponseParams.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.FrequencyResponseParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.FrequencyResponseParams)
  return false;
#undef DO_
}

void FrequencyResponseParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.FrequencyResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // .flexsdr.TuneResult tune_result = 2;
  if (this->has_tune_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_tune_result(), output);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.FrequencyResponseParams.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.FrequencyResponseParams)
}

::google::protobuf::uint8* FrequencyResponseParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.FrequencyResponseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // .flexsdr.TuneResult tune_result = 2;
  if (this->has_tune_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_tune_result(), deterministic, target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.FrequencyResponseParams.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.FrequencyResponseParams)
  return target;
}

size_t FrequencyResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.FrequencyResponseParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // .flexsdr.TuneResult tune_result = 2;
  if (this->has_tune_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tune_result_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyResponseParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.FrequencyResponseParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyResponseParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrequencyResponseParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.FrequencyResponseParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.FrequencyResponseParams)
    MergeFrom(*source);
  }
}

void FrequencyResponseParams::MergeFrom(const FrequencyResponseParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.FrequencyResponseParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_tune_result()) {
    mutable_tune_result()->::flexsdr::TuneResult::MergeFrom(from.tune_result());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void FrequencyResponseParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.FrequencyResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyResponseParams::CopyFrom(const FrequencyResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.FrequencyResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyResponseParams::IsInitialized() const {
  return true;
}

void FrequencyResponseParams::Swap(FrequencyResponseParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrequencyResponseParams::InternalSwap(FrequencyResponseParams* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tune_result_, other->tune_result_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrequencyResponseParams::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrequencyValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrequencyValue::kSuccessFieldNumber;
const int FrequencyValue::kFrequencyFieldNumber;
const int FrequencyValue::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrequencyValue::FrequencyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_FrequencyValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.FrequencyValue)
}
FrequencyValue::FrequencyValue(const FrequencyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&frequency_, &from.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&frequency_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.FrequencyValue)
}

void FrequencyValue::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(success_));
}

FrequencyValue::~FrequencyValue() {
  // @@protoc_insertion_point(destructor:flexsdr.FrequencyValue)
  SharedDtor();
}

void FrequencyValue::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrequencyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrequencyValue::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrequencyValue& FrequencyValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_FrequencyValue.base);
  return *internal_default_instance();
}


void FrequencyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.FrequencyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

bool FrequencyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.FrequencyValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frequency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.FrequencyValue.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.FrequencyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.FrequencyValue)
  return false;
#undef DO_
}

void FrequencyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.FrequencyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // double frequency = 2;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frequency(), output);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.FrequencyValue.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.FrequencyValue)
}

::google::protobuf::uint8* FrequencyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.FrequencyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // double frequency = 2;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frequency(), target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.FrequencyValue.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.FrequencyValue)
  return target;
}

size_t FrequencyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.FrequencyValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // double frequency = 2;
  if (this->frequency() != 0) {
    total_size += 1 + 8;
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.FrequencyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrequencyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.FrequencyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.FrequencyValue)
    MergeFrom(*source);
  }
}

void FrequencyValue::MergeFrom(const FrequencyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.FrequencyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void FrequencyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.FrequencyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyValue::CopyFrom(const FrequencyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.FrequencyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyValue::IsInitialized() const {
  return true;
}

void FrequencyValue::Swap(FrequencyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrequencyValue::InternalSwap(FrequencyValue* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frequency_, other->frequency_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrequencyValue::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfoRequest::DeviceInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_DeviceInfoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.DeviceInfoRequest)
}
DeviceInfoRequest::DeviceInfoRequest(const DeviceInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flexsdr.DeviceInfoRequest)
}

void DeviceInfoRequest::SharedCtor() {
}

DeviceInfoRequest::~DeviceInfoRequest() {
  // @@protoc_insertion_point(destructor:flexsdr.DeviceInfoRequest)
  SharedDtor();
}

void DeviceInfoRequest::SharedDtor() {
}

void DeviceInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceInfoRequest::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfoRequest& DeviceInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_DeviceInfoRequest.base);
  return *internal_default_instance();
}


void DeviceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.DeviceInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeviceInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.DeviceInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.DeviceInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.DeviceInfoRequest)
  return false;
#undef DO_
}

void DeviceInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.DeviceInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.DeviceInfoRequest)
}

::google::protobuf::uint8* DeviceInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.DeviceInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.DeviceInfoRequest)
  return target;
}

size_t DeviceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.DeviceInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.DeviceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.DeviceInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.DeviceInfoRequest)
    MergeFrom(*source);
  }
}

void DeviceInfoRequest::MergeFrom(const DeviceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.DeviceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.DeviceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoRequest::CopyFrom(const DeviceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.DeviceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoRequest::IsInitialized() const {
  return true;
}

void DeviceInfoRequest::Swap(DeviceInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfoRequest::InternalSwap(DeviceInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceInfoRequest::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfoResponse::kDeviceNameFieldNumber;
const int DeviceInfoResponse::kSerialNumberFieldNumber;
const int DeviceInfoResponse::kRxAntennasFieldNumber;
const int DeviceInfoResponse::kTxAntennasFieldNumber;
const int DeviceInfoResponse::kMinRxGainFieldNumber;
const int DeviceInfoResponse::kMaxRxGainFieldNumber;
const int DeviceInfoResponse::kMinTxGainFieldNumber;
const int DeviceInfoResponse::kMaxTxGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfoResponse::DeviceInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flexsdr_2eproto::scc_info_DeviceInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flexsdr.DeviceInfoResponse)
}
DeviceInfoResponse::DeviceInfoResponse(const DeviceInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rx_antennas_(from.rx_antennas_),
      tx_antennas_(from.tx_antennas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  ::memcpy(&min_rx_gain_, &from.min_rx_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_tx_gain_) -
    reinterpret_cast<char*>(&min_rx_gain_)) + sizeof(max_tx_gain_));
  // @@protoc_insertion_point(copy_constructor:flexsdr.DeviceInfoResponse)
}

void DeviceInfoResponse::SharedCtor() {
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_rx_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_tx_gain_) -
      reinterpret_cast<char*>(&min_rx_gain_)) + sizeof(max_tx_gain_));
}

DeviceInfoResponse::~DeviceInfoResponse() {
  // @@protoc_insertion_point(destructor:flexsdr.DeviceInfoResponse)
  SharedDtor();
}

void DeviceInfoResponse::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceInfoResponse::descriptor() {
  ::protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfoResponse& DeviceInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flexsdr_2eproto::scc_info_DeviceInfoResponse.base);
  return *internal_default_instance();
}


void DeviceInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flexsdr.DeviceInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rx_antennas_.Clear();
  tx_antennas_.Clear();
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_rx_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_tx_gain_) -
      reinterpret_cast<char*>(&min_rx_gain_)) + sizeof(max_tx_gain_));
  _internal_metadata_.Clear();
}

bool DeviceInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flexsdr.DeviceInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.DeviceInfoResponse.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.DeviceInfoResponse.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string rx_antennas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rx_antennas()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rx_antennas(this->rx_antennas_size() - 1).data(),
            static_cast<int>(this->rx_antennas(this->rx_antennas_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.DeviceInfoResponse.rx_antennas"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tx_antennas = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tx_antennas()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_antennas(this->tx_antennas_size() - 1).data(),
            static_cast<int>(this->tx_antennas(this->tx_antennas_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flexsdr.DeviceInfoResponse.tx_antennas"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_rx_gain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_rx_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_rx_gain = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_rx_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_tx_gain = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_tx_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_tx_gain = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_tx_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flexsdr.DeviceInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flexsdr.DeviceInfoResponse)
  return false;
#undef DO_
}

void DeviceInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flexsdr.DeviceInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.DeviceInfoResponse.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // string serial_number = 2;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.DeviceInfoResponse.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serial_number(), output);
  }

  // repeated string rx_antennas = 3;
  for (int i = 0, n = this->rx_antennas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rx_antennas(i).data(), static_cast<int>(this->rx_antennas(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.DeviceInfoResponse.rx_antennas");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rx_antennas(i), output);
  }

  // repeated string tx_antennas = 4;
  for (int i = 0, n = this->tx_antennas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_antennas(i).data(), static_cast<int>(this->tx_antennas(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.DeviceInfoResponse.tx_antennas");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tx_antennas(i), output);
  }

  // double min_rx_gain = 5;
  if (this->min_rx_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_rx_gain(), output);
  }

  // double max_rx_gain = 6;
  if (this->max_rx_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->max_rx_gain(), output);
  }

  // double min_tx_gain = 7;
  if (this->min_tx_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->min_tx_gain(), output);
  }

  // double max_tx_gain = 8;
  if (this->max_tx_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->max_tx_gain(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flexsdr.DeviceInfoResponse)
}

::google::protobuf::uint8* DeviceInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flexsdr.DeviceInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.DeviceInfoResponse.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_name(), target);
  }

  // string serial_number = 2;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.DeviceInfoResponse.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serial_number(), target);
  }

  // repeated string rx_antennas = 3;
  for (int i = 0, n = this->rx_antennas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rx_antennas(i).data(), static_cast<int>(this->rx_antennas(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.DeviceInfoResponse.rx_antennas");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->rx_antennas(i), target);
  }

  // repeated string tx_antennas = 4;
  for (int i = 0, n = this->tx_antennas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_antennas(i).data(), static_cast<int>(this->tx_antennas(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flexsdr.DeviceInfoResponse.tx_antennas");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tx_antennas(i), target);
  }

  // double min_rx_gain = 5;
  if (this->min_rx_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_rx_gain(), target);
  }

  // double max_rx_gain = 6;
  if (this->max_rx_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->max_rx_gain(), target);
  }

  // double min_tx_gain = 7;
  if (this->min_tx_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->min_tx_gain(), target);
  }

  // double max_tx_gain = 8;
  if (this->max_tx_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->max_tx_gain(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flexsdr.DeviceInfoResponse)
  return target;
}

size_t DeviceInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flexsdr.DeviceInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string rx_antennas = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rx_antennas_size());
  for (int i = 0, n = this->rx_antennas_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rx_antennas(i));
  }

  // repeated string tx_antennas = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tx_antennas_size());
  for (int i = 0, n = this->tx_antennas_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tx_antennas(i));
  }

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // string serial_number = 2;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // double min_rx_gain = 5;
  if (this->min_rx_gain() != 0) {
    total_size += 1 + 8;
  }

  // double max_rx_gain = 6;
  if (this->max_rx_gain() != 0) {
    total_size += 1 + 8;
  }

  // double min_tx_gain = 7;
  if (this->min_tx_gain() != 0) {
    total_size += 1 + 8;
  }

  // double max_tx_gain = 8;
  if (this->max_tx_gain() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flexsdr.DeviceInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flexsdr.DeviceInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flexsdr.DeviceInfoResponse)
    MergeFrom(*source);
  }
}

void DeviceInfoResponse::MergeFrom(const DeviceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flexsdr.DeviceInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rx_antennas_.MergeFrom(from.rx_antennas_);
  tx_antennas_.MergeFrom(from.tx_antennas_);
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.min_rx_gain() != 0) {
    set_min_rx_gain(from.min_rx_gain());
  }
  if (from.max_rx_gain() != 0) {
    set_max_rx_gain(from.max_rx_gain());
  }
  if (from.min_tx_gain() != 0) {
    set_min_tx_gain(from.min_tx_gain());
  }
  if (from.max_tx_gain() != 0) {
    set_max_tx_gain(from.max_tx_gain());
  }
}

void DeviceInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flexsdr.DeviceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoResponse::CopyFrom(const DeviceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flexsdr.DeviceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoResponse::IsInitialized() const {
  return true;
}

void DeviceInfoResponse::Swap(DeviceInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfoResponse::InternalSwap(DeviceInfoResponse* other) {
  using std::swap;
  rx_antennas_.InternalSwap(CastToBase(&other->rx_antennas_));
  tx_antennas_.InternalSwap(CastToBase(&other->tx_antennas_));
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_rx_gain_, other->min_rx_gain_);
  swap(max_rx_gain_, other->max_rx_gain_);
  swap(min_tx_gain_, other->min_tx_gain_);
  swap(max_tx_gain_, other->max_tx_gain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceInfoResponse::GetMetadata() const {
  protobuf_flexsdr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flexsdr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace flexsdr
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::ChannelRequest* Arena::CreateMaybeMessage< ::flexsdr::ChannelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::ChannelRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::ClockRateRequestParams* Arena::CreateMaybeMessage< ::flexsdr::ClockRateRequestParams >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::ClockRateRequestParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::ClockRateResponseParams* Arena::CreateMaybeMessage< ::flexsdr::ClockRateResponseParams >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::ClockRateResponseParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::GainRequestParams* Arena::CreateMaybeMessage< ::flexsdr::GainRequestParams >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::GainRequestParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::GainResponseParams* Arena::CreateMaybeMessage< ::flexsdr::GainResponseParams >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::GainResponseParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::RateRequestParams* Arena::CreateMaybeMessage< ::flexsdr::RateRequestParams >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::RateRequestParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::RateResponseParams* Arena::CreateMaybeMessage< ::flexsdr::RateResponseParams >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::RateResponseParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::TuneRequest* Arena::CreateMaybeMessage< ::flexsdr::TuneRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::TuneRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::TuneResult* Arena::CreateMaybeMessage< ::flexsdr::TuneResult >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::TuneResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::FrequencyRequestParams* Arena::CreateMaybeMessage< ::flexsdr::FrequencyRequestParams >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::FrequencyRequestParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::FrequencyResponseParams* Arena::CreateMaybeMessage< ::flexsdr::FrequencyResponseParams >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::FrequencyResponseParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::FrequencyValue* Arena::CreateMaybeMessage< ::flexsdr::FrequencyValue >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::FrequencyValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::DeviceInfoRequest* Arena::CreateMaybeMessage< ::flexsdr::DeviceInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::DeviceInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flexsdr::DeviceInfoResponse* Arena::CreateMaybeMessage< ::flexsdr::DeviceInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flexsdr::DeviceInfoResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
