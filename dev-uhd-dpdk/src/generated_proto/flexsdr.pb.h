// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flexsdr.proto

#ifndef PROTOBUF_INCLUDED_flexsdr_2eproto
#define PROTOBUF_INCLUDED_flexsdr_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_flexsdr_2eproto 

namespace protobuf_flexsdr_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_flexsdr_2eproto
namespace flexsdr {
class ChannelRequest;
class ChannelRequestDefaultTypeInternal;
extern ChannelRequestDefaultTypeInternal _ChannelRequest_default_instance_;
class ClockRateRequestParams;
class ClockRateRequestParamsDefaultTypeInternal;
extern ClockRateRequestParamsDefaultTypeInternal _ClockRateRequestParams_default_instance_;
class ClockRateResponseParams;
class ClockRateResponseParamsDefaultTypeInternal;
extern ClockRateResponseParamsDefaultTypeInternal _ClockRateResponseParams_default_instance_;
class DeviceInfoRequest;
class DeviceInfoRequestDefaultTypeInternal;
extern DeviceInfoRequestDefaultTypeInternal _DeviceInfoRequest_default_instance_;
class DeviceInfoResponse;
class DeviceInfoResponseDefaultTypeInternal;
extern DeviceInfoResponseDefaultTypeInternal _DeviceInfoResponse_default_instance_;
class FrequencyRequestParams;
class FrequencyRequestParamsDefaultTypeInternal;
extern FrequencyRequestParamsDefaultTypeInternal _FrequencyRequestParams_default_instance_;
class FrequencyResponseParams;
class FrequencyResponseParamsDefaultTypeInternal;
extern FrequencyResponseParamsDefaultTypeInternal _FrequencyResponseParams_default_instance_;
class FrequencyValue;
class FrequencyValueDefaultTypeInternal;
extern FrequencyValueDefaultTypeInternal _FrequencyValue_default_instance_;
class GainRequestParams;
class GainRequestParamsDefaultTypeInternal;
extern GainRequestParamsDefaultTypeInternal _GainRequestParams_default_instance_;
class GainResponseParams;
class GainResponseParamsDefaultTypeInternal;
extern GainResponseParamsDefaultTypeInternal _GainResponseParams_default_instance_;
class RateRequestParams;
class RateRequestParamsDefaultTypeInternal;
extern RateRequestParamsDefaultTypeInternal _RateRequestParams_default_instance_;
class RateResponseParams;
class RateResponseParamsDefaultTypeInternal;
extern RateResponseParamsDefaultTypeInternal _RateResponseParams_default_instance_;
class TuneRequest;
class TuneRequestDefaultTypeInternal;
extern TuneRequestDefaultTypeInternal _TuneRequest_default_instance_;
class TuneResult;
class TuneResultDefaultTypeInternal;
extern TuneResultDefaultTypeInternal _TuneResult_default_instance_;
}  // namespace flexsdr
namespace google {
namespace protobuf {
template<> ::flexsdr::ChannelRequest* Arena::CreateMaybeMessage<::flexsdr::ChannelRequest>(Arena*);
template<> ::flexsdr::ClockRateRequestParams* Arena::CreateMaybeMessage<::flexsdr::ClockRateRequestParams>(Arena*);
template<> ::flexsdr::ClockRateResponseParams* Arena::CreateMaybeMessage<::flexsdr::ClockRateResponseParams>(Arena*);
template<> ::flexsdr::DeviceInfoRequest* Arena::CreateMaybeMessage<::flexsdr::DeviceInfoRequest>(Arena*);
template<> ::flexsdr::DeviceInfoResponse* Arena::CreateMaybeMessage<::flexsdr::DeviceInfoResponse>(Arena*);
template<> ::flexsdr::FrequencyRequestParams* Arena::CreateMaybeMessage<::flexsdr::FrequencyRequestParams>(Arena*);
template<> ::flexsdr::FrequencyResponseParams* Arena::CreateMaybeMessage<::flexsdr::FrequencyResponseParams>(Arena*);
template<> ::flexsdr::FrequencyValue* Arena::CreateMaybeMessage<::flexsdr::FrequencyValue>(Arena*);
template<> ::flexsdr::GainRequestParams* Arena::CreateMaybeMessage<::flexsdr::GainRequestParams>(Arena*);
template<> ::flexsdr::GainResponseParams* Arena::CreateMaybeMessage<::flexsdr::GainResponseParams>(Arena*);
template<> ::flexsdr::RateRequestParams* Arena::CreateMaybeMessage<::flexsdr::RateRequestParams>(Arena*);
template<> ::flexsdr::RateResponseParams* Arena::CreateMaybeMessage<::flexsdr::RateResponseParams>(Arena*);
template<> ::flexsdr::TuneRequest* Arena::CreateMaybeMessage<::flexsdr::TuneRequest>(Arena*);
template<> ::flexsdr::TuneResult* Arena::CreateMaybeMessage<::flexsdr::TuneResult>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flexsdr {

enum TuneRequest_Policy {
  TuneRequest_Policy_POLICY_NONE = 0,
  TuneRequest_Policy_POLICY_AUTO = 1,
  TuneRequest_Policy_POLICY_MANUAL = 2,
  TuneRequest_Policy_TuneRequest_Policy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TuneRequest_Policy_TuneRequest_Policy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TuneRequest_Policy_IsValid(int value);
const TuneRequest_Policy TuneRequest_Policy_Policy_MIN = TuneRequest_Policy_POLICY_NONE;
const TuneRequest_Policy TuneRequest_Policy_Policy_MAX = TuneRequest_Policy_POLICY_MANUAL;
const int TuneRequest_Policy_Policy_ARRAYSIZE = TuneRequest_Policy_Policy_MAX + 1;

const ::google::protobuf::EnumDescriptor* TuneRequest_Policy_descriptor();
inline const ::std::string& TuneRequest_Policy_Name(TuneRequest_Policy value) {
  return ::google::protobuf::internal::NameOfEnum(
    TuneRequest_Policy_descriptor(), value);
}
inline bool TuneRequest_Policy_Parse(
    const ::std::string& name, TuneRequest_Policy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TuneRequest_Policy>(
    TuneRequest_Policy_descriptor(), name, value);
}
enum UnitType {
  UNIT_INVALID = 0,
  UNIT_RX = 114,
  UNIT_TX = 116,
  UNIT_BOTH = 98,
  UnitType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UnitType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UnitType_IsValid(int value);
const UnitType UnitType_MIN = UNIT_INVALID;
const UnitType UnitType_MAX = UNIT_TX;
const int UnitType_ARRAYSIZE = UnitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnitType_descriptor();
inline const ::std::string& UnitType_Name(UnitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnitType_descriptor(), value);
}
inline bool UnitType_Parse(
    const ::std::string& name, UnitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnitType>(
    UnitType_descriptor(), name, value);
}
// ===================================================================

class ChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.ChannelRequest) */ {
 public:
  ChannelRequest();
  virtual ~ChannelRequest();

  ChannelRequest(const ChannelRequest& from);

  inline ChannelRequest& operator=(const ChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelRequest(ChannelRequest&& from) noexcept
    : ChannelRequest() {
    *this = ::std::move(from);
  }

  inline ChannelRequest& operator=(ChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelRequest* internal_default_instance() {
    return reinterpret_cast<const ChannelRequest*>(
               &_ChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ChannelRequest* other);
  friend void swap(ChannelRequest& a, ChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelRequest* New() const final {
    return CreateMaybeMessage<ChannelRequest>(NULL);
  }

  ChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelRequest& from);
  void MergeFrom(const ChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 chan = 1;
  void clear_chan();
  static const int kChanFieldNumber = 1;
  ::google::protobuf::uint32 chan() const;
  void set_chan(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flexsdr.ChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 chan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClockRateRequestParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.ClockRateRequestParams) */ {
 public:
  ClockRateRequestParams();
  virtual ~ClockRateRequestParams();

  ClockRateRequestParams(const ClockRateRequestParams& from);

  inline ClockRateRequestParams& operator=(const ClockRateRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClockRateRequestParams(ClockRateRequestParams&& from) noexcept
    : ClockRateRequestParams() {
    *this = ::std::move(from);
  }

  inline ClockRateRequestParams& operator=(ClockRateRequestParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClockRateRequestParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClockRateRequestParams* internal_default_instance() {
    return reinterpret_cast<const ClockRateRequestParams*>(
               &_ClockRateRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClockRateRequestParams* other);
  friend void swap(ClockRateRequestParams& a, ClockRateRequestParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClockRateRequestParams* New() const final {
    return CreateMaybeMessage<ClockRateRequestParams>(NULL);
  }

  ClockRateRequestParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClockRateRequestParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClockRateRequestParams& from);
  void MergeFrom(const ClockRateRequestParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClockRateRequestParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double rate = 2;
  void clear_rate();
  static const int kRateFieldNumber = 2;
  double rate() const;
  void set_rate(double value);

  // .flexsdr.UnitType unit = 1;
  void clear_unit();
  static const int kUnitFieldNumber = 1;
  ::flexsdr::UnitType unit() const;
  void set_unit(::flexsdr::UnitType value);

  // @@protoc_insertion_point(class_scope:flexsdr.ClockRateRequestParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double rate_;
  int unit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClockRateResponseParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.ClockRateResponseParams) */ {
 public:
  ClockRateResponseParams();
  virtual ~ClockRateResponseParams();

  ClockRateResponseParams(const ClockRateResponseParams& from);

  inline ClockRateResponseParams& operator=(const ClockRateResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClockRateResponseParams(ClockRateResponseParams&& from) noexcept
    : ClockRateResponseParams() {
    *this = ::std::move(from);
  }

  inline ClockRateResponseParams& operator=(ClockRateResponseParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClockRateResponseParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClockRateResponseParams* internal_default_instance() {
    return reinterpret_cast<const ClockRateResponseParams*>(
               &_ClockRateResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClockRateResponseParams* other);
  friend void swap(ClockRateResponseParams& a, ClockRateResponseParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClockRateResponseParams* New() const final {
    return CreateMaybeMessage<ClockRateResponseParams>(NULL);
  }

  ClockRateResponseParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClockRateResponseParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClockRateResponseParams& from);
  void MergeFrom(const ClockRateResponseParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClockRateResponseParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // double actual_rate = 2;
  void clear_actual_rate();
  static const int kActualRateFieldNumber = 2;
  double actual_rate() const;
  void set_actual_rate(double value);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:flexsdr.ClockRateResponseParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  double actual_rate_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GainRequestParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.GainRequestParams) */ {
 public:
  GainRequestParams();
  virtual ~GainRequestParams();

  GainRequestParams(const GainRequestParams& from);

  inline GainRequestParams& operator=(const GainRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GainRequestParams(GainRequestParams&& from) noexcept
    : GainRequestParams() {
    *this = ::std::move(from);
  }

  inline GainRequestParams& operator=(GainRequestParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GainRequestParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GainRequestParams* internal_default_instance() {
    return reinterpret_cast<const GainRequestParams*>(
               &_GainRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GainRequestParams* other);
  friend void swap(GainRequestParams& a, GainRequestParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GainRequestParams* New() const final {
    return CreateMaybeMessage<GainRequestParams>(NULL);
  }

  GainRequestParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GainRequestParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GainRequestParams& from);
  void MergeFrom(const GainRequestParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GainRequestParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // double gain = 1;
  void clear_gain();
  static const int kGainFieldNumber = 1;
  double gain() const;
  void set_gain(double value);

  // uint32 chan = 3;
  void clear_chan();
  static const int kChanFieldNumber = 3;
  ::google::protobuf::uint32 chan() const;
  void set_chan(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flexsdr.GainRequestParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double gain_;
  ::google::protobuf::uint32 chan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GainResponseParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.GainResponseParams) */ {
 public:
  GainResponseParams();
  virtual ~GainResponseParams();

  GainResponseParams(const GainResponseParams& from);

  inline GainResponseParams& operator=(const GainResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GainResponseParams(GainResponseParams&& from) noexcept
    : GainResponseParams() {
    *this = ::std::move(from);
  }

  inline GainResponseParams& operator=(GainResponseParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GainResponseParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GainResponseParams* internal_default_instance() {
    return reinterpret_cast<const GainResponseParams*>(
               &_GainResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GainResponseParams* other);
  friend void swap(GainResponseParams& a, GainResponseParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GainResponseParams* New() const final {
    return CreateMaybeMessage<GainResponseParams>(NULL);
  }

  GainResponseParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GainResponseParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GainResponseParams& from);
  void MergeFrom(const GainResponseParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GainResponseParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // double actual_gain = 2;
  void clear_actual_gain();
  static const int kActualGainFieldNumber = 2;
  double actual_gain() const;
  void set_actual_gain(double value);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:flexsdr.GainResponseParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  double actual_gain_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateRequestParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.RateRequestParams) */ {
 public:
  RateRequestParams();
  virtual ~RateRequestParams();

  RateRequestParams(const RateRequestParams& from);

  inline RateRequestParams& operator=(const RateRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RateRequestParams(RateRequestParams&& from) noexcept
    : RateRequestParams() {
    *this = ::std::move(from);
  }

  inline RateRequestParams& operator=(RateRequestParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RateRequestParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RateRequestParams* internal_default_instance() {
    return reinterpret_cast<const RateRequestParams*>(
               &_RateRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RateRequestParams* other);
  friend void swap(RateRequestParams& a, RateRequestParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RateRequestParams* New() const final {
    return CreateMaybeMessage<RateRequestParams>(NULL);
  }

  RateRequestParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RateRequestParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RateRequestParams& from);
  void MergeFrom(const RateRequestParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateRequestParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double rate = 1;
  void clear_rate();
  static const int kRateFieldNumber = 1;
  double rate() const;
  void set_rate(double value);

  // uint32 chan = 2;
  void clear_chan();
  static const int kChanFieldNumber = 2;
  ::google::protobuf::uint32 chan() const;
  void set_chan(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flexsdr.RateRequestParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double rate_;
  ::google::protobuf::uint32 chan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateResponseParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.RateResponseParams) */ {
 public:
  RateResponseParams();
  virtual ~RateResponseParams();

  RateResponseParams(const RateResponseParams& from);

  inline RateResponseParams& operator=(const RateResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RateResponseParams(RateResponseParams&& from) noexcept
    : RateResponseParams() {
    *this = ::std::move(from);
  }

  inline RateResponseParams& operator=(RateResponseParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RateResponseParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RateResponseParams* internal_default_instance() {
    return reinterpret_cast<const RateResponseParams*>(
               &_RateResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RateResponseParams* other);
  friend void swap(RateResponseParams& a, RateResponseParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RateResponseParams* New() const final {
    return CreateMaybeMessage<RateResponseParams>(NULL);
  }

  RateResponseParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RateResponseParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RateResponseParams& from);
  void MergeFrom(const RateResponseParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateResponseParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // double actual_rate = 2;
  void clear_actual_rate();
  static const int kActualRateFieldNumber = 2;
  double actual_rate() const;
  void set_actual_rate(double value);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:flexsdr.RateResponseParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  double actual_rate_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TuneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.TuneRequest) */ {
 public:
  TuneRequest();
  virtual ~TuneRequest();

  TuneRequest(const TuneRequest& from);

  inline TuneRequest& operator=(const TuneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TuneRequest(TuneRequest&& from) noexcept
    : TuneRequest() {
    *this = ::std::move(from);
  }

  inline TuneRequest& operator=(TuneRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TuneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TuneRequest* internal_default_instance() {
    return reinterpret_cast<const TuneRequest*>(
               &_TuneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TuneRequest* other);
  friend void swap(TuneRequest& a, TuneRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TuneRequest* New() const final {
    return CreateMaybeMessage<TuneRequest>(NULL);
  }

  TuneRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TuneRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TuneRequest& from);
  void MergeFrom(const TuneRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TuneRequest_Policy Policy;
  static const Policy POLICY_NONE =
    TuneRequest_Policy_POLICY_NONE;
  static const Policy POLICY_AUTO =
    TuneRequest_Policy_POLICY_AUTO;
  static const Policy POLICY_MANUAL =
    TuneRequest_Policy_POLICY_MANUAL;
  static inline bool Policy_IsValid(int value) {
    return TuneRequest_Policy_IsValid(value);
  }
  static const Policy Policy_MIN =
    TuneRequest_Policy_Policy_MIN;
  static const Policy Policy_MAX =
    TuneRequest_Policy_Policy_MAX;
  static const int Policy_ARRAYSIZE =
    TuneRequest_Policy_Policy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Policy_descriptor() {
    return TuneRequest_Policy_descriptor();
  }
  static inline const ::std::string& Policy_Name(Policy value) {
    return TuneRequest_Policy_Name(value);
  }
  static inline bool Policy_Parse(const ::std::string& name,
      Policy* value) {
    return TuneRequest_Policy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // double target_freq = 1;
  void clear_target_freq();
  static const int kTargetFreqFieldNumber = 1;
  double target_freq() const;
  void set_target_freq(double value);

  // double rf_freq = 3;
  void clear_rf_freq();
  static const int kRfFreqFieldNumber = 3;
  double rf_freq() const;
  void set_rf_freq(double value);

  // .flexsdr.TuneRequest.Policy rf_freq_policy = 2;
  void clear_rf_freq_policy();
  static const int kRfFreqPolicyFieldNumber = 2;
  ::flexsdr::TuneRequest_Policy rf_freq_policy() const;
  void set_rf_freq_policy(::flexsdr::TuneRequest_Policy value);

  // .flexsdr.TuneRequest.Policy dsp_freq_policy = 4;
  void clear_dsp_freq_policy();
  static const int kDspFreqPolicyFieldNumber = 4;
  ::flexsdr::TuneRequest_Policy dsp_freq_policy() const;
  void set_dsp_freq_policy(::flexsdr::TuneRequest_Policy value);

  // double dsp_freq = 5;
  void clear_dsp_freq();
  static const int kDspFreqFieldNumber = 5;
  double dsp_freq() const;
  void set_dsp_freq(double value);

  // @@protoc_insertion_point(class_scope:flexsdr.TuneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double target_freq_;
  double rf_freq_;
  int rf_freq_policy_;
  int dsp_freq_policy_;
  double dsp_freq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TuneResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.TuneResult) */ {
 public:
  TuneResult();
  virtual ~TuneResult();

  TuneResult(const TuneResult& from);

  inline TuneResult& operator=(const TuneResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TuneResult(TuneResult&& from) noexcept
    : TuneResult() {
    *this = ::std::move(from);
  }

  inline TuneResult& operator=(TuneResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TuneResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TuneResult* internal_default_instance() {
    return reinterpret_cast<const TuneResult*>(
               &_TuneResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TuneResult* other);
  friend void swap(TuneResult& a, TuneResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TuneResult* New() const final {
    return CreateMaybeMessage<TuneResult>(NULL);
  }

  TuneResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TuneResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TuneResult& from);
  void MergeFrom(const TuneResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuneResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double clipped_rf_freq = 1;
  void clear_clipped_rf_freq();
  static const int kClippedRfFreqFieldNumber = 1;
  double clipped_rf_freq() const;
  void set_clipped_rf_freq(double value);

  // double target_rf_freq = 2;
  void clear_target_rf_freq();
  static const int kTargetRfFreqFieldNumber = 2;
  double target_rf_freq() const;
  void set_target_rf_freq(double value);

  // double actual_rf_freq = 3;
  void clear_actual_rf_freq();
  static const int kActualRfFreqFieldNumber = 3;
  double actual_rf_freq() const;
  void set_actual_rf_freq(double value);

  // double target_dsp_freq = 4;
  void clear_target_dsp_freq();
  static const int kTargetDspFreqFieldNumber = 4;
  double target_dsp_freq() const;
  void set_target_dsp_freq(double value);

  // double actual_dsp_freq = 5;
  void clear_actual_dsp_freq();
  static const int kActualDspFreqFieldNumber = 5;
  double actual_dsp_freq() const;
  void set_actual_dsp_freq(double value);

  // @@protoc_insertion_point(class_scope:flexsdr.TuneResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double clipped_rf_freq_;
  double target_rf_freq_;
  double actual_rf_freq_;
  double target_dsp_freq_;
  double actual_dsp_freq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrequencyRequestParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.FrequencyRequestParams) */ {
 public:
  FrequencyRequestParams();
  virtual ~FrequencyRequestParams();

  FrequencyRequestParams(const FrequencyRequestParams& from);

  inline FrequencyRequestParams& operator=(const FrequencyRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrequencyRequestParams(FrequencyRequestParams&& from) noexcept
    : FrequencyRequestParams() {
    *this = ::std::move(from);
  }

  inline FrequencyRequestParams& operator=(FrequencyRequestParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrequencyRequestParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrequencyRequestParams* internal_default_instance() {
    return reinterpret_cast<const FrequencyRequestParams*>(
               &_FrequencyRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FrequencyRequestParams* other);
  friend void swap(FrequencyRequestParams& a, FrequencyRequestParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrequencyRequestParams* New() const final {
    return CreateMaybeMessage<FrequencyRequestParams>(NULL);
  }

  FrequencyRequestParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyRequestParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrequencyRequestParams& from);
  void MergeFrom(const FrequencyRequestParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyRequestParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flexsdr.TuneRequest tune_request = 1;
  bool has_tune_request() const;
  void clear_tune_request();
  static const int kTuneRequestFieldNumber = 1;
  private:
  const ::flexsdr::TuneRequest& _internal_tune_request() const;
  public:
  const ::flexsdr::TuneRequest& tune_request() const;
  ::flexsdr::TuneRequest* release_tune_request();
  ::flexsdr::TuneRequest* mutable_tune_request();
  void set_allocated_tune_request(::flexsdr::TuneRequest* tune_request);

  // .flexsdr.ChannelRequest channel_request = 2;
  bool has_channel_request() const;
  void clear_channel_request();
  static const int kChannelRequestFieldNumber = 2;
  private:
  const ::flexsdr::ChannelRequest& _internal_channel_request() const;
  public:
  const ::flexsdr::ChannelRequest& channel_request() const;
  ::flexsdr::ChannelRequest* release_channel_request();
  ::flexsdr::ChannelRequest* mutable_channel_request();
  void set_allocated_channel_request(::flexsdr::ChannelRequest* channel_request);

  // @@protoc_insertion_point(class_scope:flexsdr.FrequencyRequestParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flexsdr::TuneRequest* tune_request_;
  ::flexsdr::ChannelRequest* channel_request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrequencyResponseParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.FrequencyResponseParams) */ {
 public:
  FrequencyResponseParams();
  virtual ~FrequencyResponseParams();

  FrequencyResponseParams(const FrequencyResponseParams& from);

  inline FrequencyResponseParams& operator=(const FrequencyResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrequencyResponseParams(FrequencyResponseParams&& from) noexcept
    : FrequencyResponseParams() {
    *this = ::std::move(from);
  }

  inline FrequencyResponseParams& operator=(FrequencyResponseParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrequencyResponseParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrequencyResponseParams* internal_default_instance() {
    return reinterpret_cast<const FrequencyResponseParams*>(
               &_FrequencyResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(FrequencyResponseParams* other);
  friend void swap(FrequencyResponseParams& a, FrequencyResponseParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrequencyResponseParams* New() const final {
    return CreateMaybeMessage<FrequencyResponseParams>(NULL);
  }

  FrequencyResponseParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyResponseParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrequencyResponseParams& from);
  void MergeFrom(const FrequencyResponseParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyResponseParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // .flexsdr.TuneResult tune_result = 2;
  bool has_tune_result() const;
  void clear_tune_result();
  static const int kTuneResultFieldNumber = 2;
  private:
  const ::flexsdr::TuneResult& _internal_tune_result() const;
  public:
  const ::flexsdr::TuneResult& tune_result() const;
  ::flexsdr::TuneResult* release_tune_result();
  ::flexsdr::TuneResult* mutable_tune_result();
  void set_allocated_tune_result(::flexsdr::TuneResult* tune_result);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:flexsdr.FrequencyResponseParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::flexsdr::TuneResult* tune_result_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrequencyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.FrequencyValue) */ {
 public:
  FrequencyValue();
  virtual ~FrequencyValue();

  FrequencyValue(const FrequencyValue& from);

  inline FrequencyValue& operator=(const FrequencyValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrequencyValue(FrequencyValue&& from) noexcept
    : FrequencyValue() {
    *this = ::std::move(from);
  }

  inline FrequencyValue& operator=(FrequencyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrequencyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrequencyValue* internal_default_instance() {
    return reinterpret_cast<const FrequencyValue*>(
               &_FrequencyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(FrequencyValue* other);
  friend void swap(FrequencyValue& a, FrequencyValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrequencyValue* New() const final {
    return CreateMaybeMessage<FrequencyValue>(NULL);
  }

  FrequencyValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrequencyValue& from);
  void MergeFrom(const FrequencyValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // double frequency = 2;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  double frequency() const;
  void set_frequency(double value);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:flexsdr.FrequencyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  double frequency_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.DeviceInfoRequest) */ {
 public:
  DeviceInfoRequest();
  virtual ~DeviceInfoRequest();

  DeviceInfoRequest(const DeviceInfoRequest& from);

  inline DeviceInfoRequest& operator=(const DeviceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfoRequest(DeviceInfoRequest&& from) noexcept
    : DeviceInfoRequest() {
    *this = ::std::move(from);
  }

  inline DeviceInfoRequest& operator=(DeviceInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoRequest*>(
               &_DeviceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DeviceInfoRequest* other);
  friend void swap(DeviceInfoRequest& a, DeviceInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfoRequest* New() const final {
    return CreateMaybeMessage<DeviceInfoRequest>(NULL);
  }

  DeviceInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfoRequest& from);
  void MergeFrom(const DeviceInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flexsdr.DeviceInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flexsdr.DeviceInfoResponse) */ {
 public:
  DeviceInfoResponse();
  virtual ~DeviceInfoResponse();

  DeviceInfoResponse(const DeviceInfoResponse& from);

  inline DeviceInfoResponse& operator=(const DeviceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfoResponse(DeviceInfoResponse&& from) noexcept
    : DeviceInfoResponse() {
    *this = ::std::move(from);
  }

  inline DeviceInfoResponse& operator=(DeviceInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfoResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoResponse*>(
               &_DeviceInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DeviceInfoResponse* other);
  friend void swap(DeviceInfoResponse& a, DeviceInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfoResponse* New() const final {
    return CreateMaybeMessage<DeviceInfoResponse>(NULL);
  }

  DeviceInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfoResponse& from);
  void MergeFrom(const DeviceInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string rx_antennas = 3;
  int rx_antennas_size() const;
  void clear_rx_antennas();
  static const int kRxAntennasFieldNumber = 3;
  const ::std::string& rx_antennas(int index) const;
  ::std::string* mutable_rx_antennas(int index);
  void set_rx_antennas(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_rx_antennas(int index, ::std::string&& value);
  #endif
  void set_rx_antennas(int index, const char* value);
  void set_rx_antennas(int index, const char* value, size_t size);
  ::std::string* add_rx_antennas();
  void add_rx_antennas(const ::std::string& value);
  #if LANG_CXX11
  void add_rx_antennas(::std::string&& value);
  #endif
  void add_rx_antennas(const char* value);
  void add_rx_antennas(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& rx_antennas() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rx_antennas();

  // repeated string tx_antennas = 4;
  int tx_antennas_size() const;
  void clear_tx_antennas();
  static const int kTxAntennasFieldNumber = 4;
  const ::std::string& tx_antennas(int index) const;
  ::std::string* mutable_tx_antennas(int index);
  void set_tx_antennas(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tx_antennas(int index, ::std::string&& value);
  #endif
  void set_tx_antennas(int index, const char* value);
  void set_tx_antennas(int index, const char* value, size_t size);
  ::std::string* add_tx_antennas();
  void add_tx_antennas(const ::std::string& value);
  #if LANG_CXX11
  void add_tx_antennas(::std::string&& value);
  #endif
  void add_tx_antennas(const char* value);
  void add_tx_antennas(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tx_antennas() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tx_antennas();

  // string device_name = 1;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 1;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // string serial_number = 2;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 2;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // double min_rx_gain = 5;
  void clear_min_rx_gain();
  static const int kMinRxGainFieldNumber = 5;
  double min_rx_gain() const;
  void set_min_rx_gain(double value);

  // double max_rx_gain = 6;
  void clear_max_rx_gain();
  static const int kMaxRxGainFieldNumber = 6;
  double max_rx_gain() const;
  void set_max_rx_gain(double value);

  // double min_tx_gain = 7;
  void clear_min_tx_gain();
  static const int kMinTxGainFieldNumber = 7;
  double min_tx_gain() const;
  void set_min_tx_gain(double value);

  // double max_tx_gain = 8;
  void clear_max_tx_gain();
  static const int kMaxTxGainFieldNumber = 8;
  double max_tx_gain() const;
  void set_max_tx_gain(double value);

  // @@protoc_insertion_point(class_scope:flexsdr.DeviceInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rx_antennas_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tx_antennas_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  double min_rx_gain_;
  double max_rx_gain_;
  double min_tx_gain_;
  double max_tx_gain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flexsdr_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelRequest

// uint32 chan = 1;
inline void ChannelRequest::clear_chan() {
  chan_ = 0u;
}
inline ::google::protobuf::uint32 ChannelRequest::chan() const {
  // @@protoc_insertion_point(field_get:flexsdr.ChannelRequest.chan)
  return chan_;
}
inline void ChannelRequest::set_chan(::google::protobuf::uint32 value) {
  
  chan_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.ChannelRequest.chan)
}

// -------------------------------------------------------------------

// ClockRateRequestParams

// .flexsdr.UnitType unit = 1;
inline void ClockRateRequestParams::clear_unit() {
  unit_ = 0;
}
inline ::flexsdr::UnitType ClockRateRequestParams::unit() const {
  // @@protoc_insertion_point(field_get:flexsdr.ClockRateRequestParams.unit)
  return static_cast< ::flexsdr::UnitType >(unit_);
}
inline void ClockRateRequestParams::set_unit(::flexsdr::UnitType value) {
  
  unit_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.ClockRateRequestParams.unit)
}

// double rate = 2;
inline void ClockRateRequestParams::clear_rate() {
  rate_ = 0;
}
inline double ClockRateRequestParams::rate() const {
  // @@protoc_insertion_point(field_get:flexsdr.ClockRateRequestParams.rate)
  return rate_;
}
inline void ClockRateRequestParams::set_rate(double value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.ClockRateRequestParams.rate)
}

// -------------------------------------------------------------------

// ClockRateResponseParams

// bool success = 1;
inline void ClockRateResponseParams::clear_success() {
  success_ = false;
}
inline bool ClockRateResponseParams::success() const {
  // @@protoc_insertion_point(field_get:flexsdr.ClockRateResponseParams.success)
  return success_;
}
inline void ClockRateResponseParams::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.ClockRateResponseParams.success)
}

// double actual_rate = 2;
inline void ClockRateResponseParams::clear_actual_rate() {
  actual_rate_ = 0;
}
inline double ClockRateResponseParams::actual_rate() const {
  // @@protoc_insertion_point(field_get:flexsdr.ClockRateResponseParams.actual_rate)
  return actual_rate_;
}
inline void ClockRateResponseParams::set_actual_rate(double value) {
  
  actual_rate_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.ClockRateResponseParams.actual_rate)
}

// string error_message = 3;
inline void ClockRateResponseParams::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClockRateResponseParams::error_message() const {
  // @@protoc_insertion_point(field_get:flexsdr.ClockRateResponseParams.error_message)
  return error_message_.GetNoArena();
}
inline void ClockRateResponseParams::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flexsdr.ClockRateResponseParams.error_message)
}
#if LANG_CXX11
inline void ClockRateResponseParams::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flexsdr.ClockRateResponseParams.error_message)
}
#endif
inline void ClockRateResponseParams::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flexsdr.ClockRateResponseParams.error_message)
}
inline void ClockRateResponseParams::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flexsdr.ClockRateResponseParams.error_message)
}
inline ::std::string* ClockRateResponseParams::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:flexsdr.ClockRateResponseParams.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClockRateResponseParams::release_error_message() {
  // @@protoc_insertion_point(field_release:flexsdr.ClockRateResponseParams.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClockRateResponseParams::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:flexsdr.ClockRateResponseParams.error_message)
}

// -------------------------------------------------------------------

// GainRequestParams

// double gain = 1;
inline void GainRequestParams::clear_gain() {
  gain_ = 0;
}
inline double GainRequestParams::gain() const {
  // @@protoc_insertion_point(field_get:flexsdr.GainRequestParams.gain)
  return gain_;
}
inline void GainRequestParams::set_gain(double value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.GainRequestParams.gain)
}

// string name = 2;
inline void GainRequestParams::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GainRequestParams::name() const {
  // @@protoc_insertion_point(field_get:flexsdr.GainRequestParams.name)
  return name_.GetNoArena();
}
inline void GainRequestParams::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flexsdr.GainRequestParams.name)
}
#if LANG_CXX11
inline void GainRequestParams::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flexsdr.GainRequestParams.name)
}
#endif
inline void GainRequestParams::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flexsdr.GainRequestParams.name)
}
inline void GainRequestParams::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flexsdr.GainRequestParams.name)
}
inline ::std::string* GainRequestParams::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flexsdr.GainRequestParams.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GainRequestParams::release_name() {
  // @@protoc_insertion_point(field_release:flexsdr.GainRequestParams.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GainRequestParams::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flexsdr.GainRequestParams.name)
}

// uint32 chan = 3;
inline void GainRequestParams::clear_chan() {
  chan_ = 0u;
}
inline ::google::protobuf::uint32 GainRequestParams::chan() const {
  // @@protoc_insertion_point(field_get:flexsdr.GainRequestParams.chan)
  return chan_;
}
inline void GainRequestParams::set_chan(::google::protobuf::uint32 value) {
  
  chan_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.GainRequestParams.chan)
}

// -------------------------------------------------------------------

// GainResponseParams

// bool success = 1;
inline void GainResponseParams::clear_success() {
  success_ = false;
}
inline bool GainResponseParams::success() const {
  // @@protoc_insertion_point(field_get:flexsdr.GainResponseParams.success)
  return success_;
}
inline void GainResponseParams::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.GainResponseParams.success)
}

// double actual_gain = 2;
inline void GainResponseParams::clear_actual_gain() {
  actual_gain_ = 0;
}
inline double GainResponseParams::actual_gain() const {
  // @@protoc_insertion_point(field_get:flexsdr.GainResponseParams.actual_gain)
  return actual_gain_;
}
inline void GainResponseParams::set_actual_gain(double value) {
  
  actual_gain_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.GainResponseParams.actual_gain)
}

// string error_message = 3;
inline void GainResponseParams::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GainResponseParams::error_message() const {
  // @@protoc_insertion_point(field_get:flexsdr.GainResponseParams.error_message)
  return error_message_.GetNoArena();
}
inline void GainResponseParams::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flexsdr.GainResponseParams.error_message)
}
#if LANG_CXX11
inline void GainResponseParams::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flexsdr.GainResponseParams.error_message)
}
#endif
inline void GainResponseParams::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flexsdr.GainResponseParams.error_message)
}
inline void GainResponseParams::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flexsdr.GainResponseParams.error_message)
}
inline ::std::string* GainResponseParams::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:flexsdr.GainResponseParams.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GainResponseParams::release_error_message() {
  // @@protoc_insertion_point(field_release:flexsdr.GainResponseParams.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GainResponseParams::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:flexsdr.GainResponseParams.error_message)
}

// -------------------------------------------------------------------

// RateRequestParams

// double rate = 1;
inline void RateRequestParams::clear_rate() {
  rate_ = 0;
}
inline double RateRequestParams::rate() const {
  // @@protoc_insertion_point(field_get:flexsdr.RateRequestParams.rate)
  return rate_;
}
inline void RateRequestParams::set_rate(double value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.RateRequestParams.rate)
}

// uint32 chan = 2;
inline void RateRequestParams::clear_chan() {
  chan_ = 0u;
}
inline ::google::protobuf::uint32 RateRequestParams::chan() const {
  // @@protoc_insertion_point(field_get:flexsdr.RateRequestParams.chan)
  return chan_;
}
inline void RateRequestParams::set_chan(::google::protobuf::uint32 value) {
  
  chan_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.RateRequestParams.chan)
}

// -------------------------------------------------------------------

// RateResponseParams

// bool success = 1;
inline void RateResponseParams::clear_success() {
  success_ = false;
}
inline bool RateResponseParams::success() const {
  // @@protoc_insertion_point(field_get:flexsdr.RateResponseParams.success)
  return success_;
}
inline void RateResponseParams::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.RateResponseParams.success)
}

// double actual_rate = 2;
inline void RateResponseParams::clear_actual_rate() {
  actual_rate_ = 0;
}
inline double RateResponseParams::actual_rate() const {
  // @@protoc_insertion_point(field_get:flexsdr.RateResponseParams.actual_rate)
  return actual_rate_;
}
inline void RateResponseParams::set_actual_rate(double value) {
  
  actual_rate_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.RateResponseParams.actual_rate)
}

// string error_message = 3;
inline void RateResponseParams::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RateResponseParams::error_message() const {
  // @@protoc_insertion_point(field_get:flexsdr.RateResponseParams.error_message)
  return error_message_.GetNoArena();
}
inline void RateResponseParams::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flexsdr.RateResponseParams.error_message)
}
#if LANG_CXX11
inline void RateResponseParams::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flexsdr.RateResponseParams.error_message)
}
#endif
inline void RateResponseParams::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flexsdr.RateResponseParams.error_message)
}
inline void RateResponseParams::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flexsdr.RateResponseParams.error_message)
}
inline ::std::string* RateResponseParams::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:flexsdr.RateResponseParams.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RateResponseParams::release_error_message() {
  // @@protoc_insertion_point(field_release:flexsdr.RateResponseParams.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RateResponseParams::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:flexsdr.RateResponseParams.error_message)
}

// -------------------------------------------------------------------

// TuneRequest

// double target_freq = 1;
inline void TuneRequest::clear_target_freq() {
  target_freq_ = 0;
}
inline double TuneRequest::target_freq() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneRequest.target_freq)
  return target_freq_;
}
inline void TuneRequest::set_target_freq(double value) {
  
  target_freq_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneRequest.target_freq)
}

// .flexsdr.TuneRequest.Policy rf_freq_policy = 2;
inline void TuneRequest::clear_rf_freq_policy() {
  rf_freq_policy_ = 0;
}
inline ::flexsdr::TuneRequest_Policy TuneRequest::rf_freq_policy() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneRequest.rf_freq_policy)
  return static_cast< ::flexsdr::TuneRequest_Policy >(rf_freq_policy_);
}
inline void TuneRequest::set_rf_freq_policy(::flexsdr::TuneRequest_Policy value) {
  
  rf_freq_policy_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneRequest.rf_freq_policy)
}

// double rf_freq = 3;
inline void TuneRequest::clear_rf_freq() {
  rf_freq_ = 0;
}
inline double TuneRequest::rf_freq() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneRequest.rf_freq)
  return rf_freq_;
}
inline void TuneRequest::set_rf_freq(double value) {
  
  rf_freq_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneRequest.rf_freq)
}

// .flexsdr.TuneRequest.Policy dsp_freq_policy = 4;
inline void TuneRequest::clear_dsp_freq_policy() {
  dsp_freq_policy_ = 0;
}
inline ::flexsdr::TuneRequest_Policy TuneRequest::dsp_freq_policy() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneRequest.dsp_freq_policy)
  return static_cast< ::flexsdr::TuneRequest_Policy >(dsp_freq_policy_);
}
inline void TuneRequest::set_dsp_freq_policy(::flexsdr::TuneRequest_Policy value) {
  
  dsp_freq_policy_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneRequest.dsp_freq_policy)
}

// double dsp_freq = 5;
inline void TuneRequest::clear_dsp_freq() {
  dsp_freq_ = 0;
}
inline double TuneRequest::dsp_freq() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneRequest.dsp_freq)
  return dsp_freq_;
}
inline void TuneRequest::set_dsp_freq(double value) {
  
  dsp_freq_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneRequest.dsp_freq)
}

// -------------------------------------------------------------------

// TuneResult

// double clipped_rf_freq = 1;
inline void TuneResult::clear_clipped_rf_freq() {
  clipped_rf_freq_ = 0;
}
inline double TuneResult::clipped_rf_freq() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneResult.clipped_rf_freq)
  return clipped_rf_freq_;
}
inline void TuneResult::set_clipped_rf_freq(double value) {
  
  clipped_rf_freq_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneResult.clipped_rf_freq)
}

// double target_rf_freq = 2;
inline void TuneResult::clear_target_rf_freq() {
  target_rf_freq_ = 0;
}
inline double TuneResult::target_rf_freq() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneResult.target_rf_freq)
  return target_rf_freq_;
}
inline void TuneResult::set_target_rf_freq(double value) {
  
  target_rf_freq_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneResult.target_rf_freq)
}

// double actual_rf_freq = 3;
inline void TuneResult::clear_actual_rf_freq() {
  actual_rf_freq_ = 0;
}
inline double TuneResult::actual_rf_freq() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneResult.actual_rf_freq)
  return actual_rf_freq_;
}
inline void TuneResult::set_actual_rf_freq(double value) {
  
  actual_rf_freq_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneResult.actual_rf_freq)
}

// double target_dsp_freq = 4;
inline void TuneResult::clear_target_dsp_freq() {
  target_dsp_freq_ = 0;
}
inline double TuneResult::target_dsp_freq() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneResult.target_dsp_freq)
  return target_dsp_freq_;
}
inline void TuneResult::set_target_dsp_freq(double value) {
  
  target_dsp_freq_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneResult.target_dsp_freq)
}

// double actual_dsp_freq = 5;
inline void TuneResult::clear_actual_dsp_freq() {
  actual_dsp_freq_ = 0;
}
inline double TuneResult::actual_dsp_freq() const {
  // @@protoc_insertion_point(field_get:flexsdr.TuneResult.actual_dsp_freq)
  return actual_dsp_freq_;
}
inline void TuneResult::set_actual_dsp_freq(double value) {
  
  actual_dsp_freq_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.TuneResult.actual_dsp_freq)
}

// -------------------------------------------------------------------

// FrequencyRequestParams

// .flexsdr.TuneRequest tune_request = 1;
inline bool FrequencyRequestParams::has_tune_request() const {
  return this != internal_default_instance() && tune_request_ != NULL;
}
inline void FrequencyRequestParams::clear_tune_request() {
  if (GetArenaNoVirtual() == NULL && tune_request_ != NULL) {
    delete tune_request_;
  }
  tune_request_ = NULL;
}
inline const ::flexsdr::TuneRequest& FrequencyRequestParams::_internal_tune_request() const {
  return *tune_request_;
}
inline const ::flexsdr::TuneRequest& FrequencyRequestParams::tune_request() const {
  const ::flexsdr::TuneRequest* p = tune_request_;
  // @@protoc_insertion_point(field_get:flexsdr.FrequencyRequestParams.tune_request)
  return p != NULL ? *p : *reinterpret_cast<const ::flexsdr::TuneRequest*>(
      &::flexsdr::_TuneRequest_default_instance_);
}
inline ::flexsdr::TuneRequest* FrequencyRequestParams::release_tune_request() {
  // @@protoc_insertion_point(field_release:flexsdr.FrequencyRequestParams.tune_request)
  
  ::flexsdr::TuneRequest* temp = tune_request_;
  tune_request_ = NULL;
  return temp;
}
inline ::flexsdr::TuneRequest* FrequencyRequestParams::mutable_tune_request() {
  
  if (tune_request_ == NULL) {
    auto* p = CreateMaybeMessage<::flexsdr::TuneRequest>(GetArenaNoVirtual());
    tune_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flexsdr.FrequencyRequestParams.tune_request)
  return tune_request_;
}
inline void FrequencyRequestParams::set_allocated_tune_request(::flexsdr::TuneRequest* tune_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tune_request_;
  }
  if (tune_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tune_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tune_request, submessage_arena);
    }
    
  } else {
    
  }
  tune_request_ = tune_request;
  // @@protoc_insertion_point(field_set_allocated:flexsdr.FrequencyRequestParams.tune_request)
}

// .flexsdr.ChannelRequest channel_request = 2;
inline bool FrequencyRequestParams::has_channel_request() const {
  return this != internal_default_instance() && channel_request_ != NULL;
}
inline void FrequencyRequestParams::clear_channel_request() {
  if (GetArenaNoVirtual() == NULL && channel_request_ != NULL) {
    delete channel_request_;
  }
  channel_request_ = NULL;
}
inline const ::flexsdr::ChannelRequest& FrequencyRequestParams::_internal_channel_request() const {
  return *channel_request_;
}
inline const ::flexsdr::ChannelRequest& FrequencyRequestParams::channel_request() const {
  const ::flexsdr::ChannelRequest* p = channel_request_;
  // @@protoc_insertion_point(field_get:flexsdr.FrequencyRequestParams.channel_request)
  return p != NULL ? *p : *reinterpret_cast<const ::flexsdr::ChannelRequest*>(
      &::flexsdr::_ChannelRequest_default_instance_);
}
inline ::flexsdr::ChannelRequest* FrequencyRequestParams::release_channel_request() {
  // @@protoc_insertion_point(field_release:flexsdr.FrequencyRequestParams.channel_request)
  
  ::flexsdr::ChannelRequest* temp = channel_request_;
  channel_request_ = NULL;
  return temp;
}
inline ::flexsdr::ChannelRequest* FrequencyRequestParams::mutable_channel_request() {
  
  if (channel_request_ == NULL) {
    auto* p = CreateMaybeMessage<::flexsdr::ChannelRequest>(GetArenaNoVirtual());
    channel_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flexsdr.FrequencyRequestParams.channel_request)
  return channel_request_;
}
inline void FrequencyRequestParams::set_allocated_channel_request(::flexsdr::ChannelRequest* channel_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_request_;
  }
  if (channel_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_request, submessage_arena);
    }
    
  } else {
    
  }
  channel_request_ = channel_request;
  // @@protoc_insertion_point(field_set_allocated:flexsdr.FrequencyRequestParams.channel_request)
}

// -------------------------------------------------------------------

// FrequencyResponseParams

// bool success = 1;
inline void FrequencyResponseParams::clear_success() {
  success_ = false;
}
inline bool FrequencyResponseParams::success() const {
  // @@protoc_insertion_point(field_get:flexsdr.FrequencyResponseParams.success)
  return success_;
}
inline void FrequencyResponseParams::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.FrequencyResponseParams.success)
}

// .flexsdr.TuneResult tune_result = 2;
inline bool FrequencyResponseParams::has_tune_result() const {
  return this != internal_default_instance() && tune_result_ != NULL;
}
inline void FrequencyResponseParams::clear_tune_result() {
  if (GetArenaNoVirtual() == NULL && tune_result_ != NULL) {
    delete tune_result_;
  }
  tune_result_ = NULL;
}
inline const ::flexsdr::TuneResult& FrequencyResponseParams::_internal_tune_result() const {
  return *tune_result_;
}
inline const ::flexsdr::TuneResult& FrequencyResponseParams::tune_result() const {
  const ::flexsdr::TuneResult* p = tune_result_;
  // @@protoc_insertion_point(field_get:flexsdr.FrequencyResponseParams.tune_result)
  return p != NULL ? *p : *reinterpret_cast<const ::flexsdr::TuneResult*>(
      &::flexsdr::_TuneResult_default_instance_);
}
inline ::flexsdr::TuneResult* FrequencyResponseParams::release_tune_result() {
  // @@protoc_insertion_point(field_release:flexsdr.FrequencyResponseParams.tune_result)
  
  ::flexsdr::TuneResult* temp = tune_result_;
  tune_result_ = NULL;
  return temp;
}
inline ::flexsdr::TuneResult* FrequencyResponseParams::mutable_tune_result() {
  
  if (tune_result_ == NULL) {
    auto* p = CreateMaybeMessage<::flexsdr::TuneResult>(GetArenaNoVirtual());
    tune_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flexsdr.FrequencyResponseParams.tune_result)
  return tune_result_;
}
inline void FrequencyResponseParams::set_allocated_tune_result(::flexsdr::TuneResult* tune_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tune_result_;
  }
  if (tune_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tune_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tune_result, submessage_arena);
    }
    
  } else {
    
  }
  tune_result_ = tune_result;
  // @@protoc_insertion_point(field_set_allocated:flexsdr.FrequencyResponseParams.tune_result)
}

// string error_message = 3;
inline void FrequencyResponseParams::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrequencyResponseParams::error_message() const {
  // @@protoc_insertion_point(field_get:flexsdr.FrequencyResponseParams.error_message)
  return error_message_.GetNoArena();
}
inline void FrequencyResponseParams::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flexsdr.FrequencyResponseParams.error_message)
}
#if LANG_CXX11
inline void FrequencyResponseParams::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flexsdr.FrequencyResponseParams.error_message)
}
#endif
inline void FrequencyResponseParams::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flexsdr.FrequencyResponseParams.error_message)
}
inline void FrequencyResponseParams::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flexsdr.FrequencyResponseParams.error_message)
}
inline ::std::string* FrequencyResponseParams::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:flexsdr.FrequencyResponseParams.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrequencyResponseParams::release_error_message() {
  // @@protoc_insertion_point(field_release:flexsdr.FrequencyResponseParams.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrequencyResponseParams::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:flexsdr.FrequencyResponseParams.error_message)
}

// -------------------------------------------------------------------

// FrequencyValue

// bool success = 1;
inline void FrequencyValue::clear_success() {
  success_ = false;
}
inline bool FrequencyValue::success() const {
  // @@protoc_insertion_point(field_get:flexsdr.FrequencyValue.success)
  return success_;
}
inline void FrequencyValue::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.FrequencyValue.success)
}

// double frequency = 2;
inline void FrequencyValue::clear_frequency() {
  frequency_ = 0;
}
inline double FrequencyValue::frequency() const {
  // @@protoc_insertion_point(field_get:flexsdr.FrequencyValue.frequency)
  return frequency_;
}
inline void FrequencyValue::set_frequency(double value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.FrequencyValue.frequency)
}

// string error_message = 3;
inline void FrequencyValue::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrequencyValue::error_message() const {
  // @@protoc_insertion_point(field_get:flexsdr.FrequencyValue.error_message)
  return error_message_.GetNoArena();
}
inline void FrequencyValue::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flexsdr.FrequencyValue.error_message)
}
#if LANG_CXX11
inline void FrequencyValue::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flexsdr.FrequencyValue.error_message)
}
#endif
inline void FrequencyValue::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flexsdr.FrequencyValue.error_message)
}
inline void FrequencyValue::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flexsdr.FrequencyValue.error_message)
}
inline ::std::string* FrequencyValue::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:flexsdr.FrequencyValue.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrequencyValue::release_error_message() {
  // @@protoc_insertion_point(field_release:flexsdr.FrequencyValue.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrequencyValue::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:flexsdr.FrequencyValue.error_message)
}

// -------------------------------------------------------------------

// DeviceInfoRequest

// -------------------------------------------------------------------

// DeviceInfoResponse

// string device_name = 1;
inline void DeviceInfoResponse::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfoResponse::device_name() const {
  // @@protoc_insertion_point(field_get:flexsdr.DeviceInfoResponse.device_name)
  return device_name_.GetNoArena();
}
inline void DeviceInfoResponse::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.device_name)
}
#if LANG_CXX11
inline void DeviceInfoResponse::set_device_name(::std::string&& value) {
  
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flexsdr.DeviceInfoResponse.device_name)
}
#endif
inline void DeviceInfoResponse::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flexsdr.DeviceInfoResponse.device_name)
}
inline void DeviceInfoResponse::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flexsdr.DeviceInfoResponse.device_name)
}
inline ::std::string* DeviceInfoResponse::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:flexsdr.DeviceInfoResponse.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfoResponse::release_device_name() {
  // @@protoc_insertion_point(field_release:flexsdr.DeviceInfoResponse.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoResponse::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:flexsdr.DeviceInfoResponse.device_name)
}

// string serial_number = 2;
inline void DeviceInfoResponse::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfoResponse::serial_number() const {
  // @@protoc_insertion_point(field_get:flexsdr.DeviceInfoResponse.serial_number)
  return serial_number_.GetNoArena();
}
inline void DeviceInfoResponse::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.serial_number)
}
#if LANG_CXX11
inline void DeviceInfoResponse::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flexsdr.DeviceInfoResponse.serial_number)
}
#endif
inline void DeviceInfoResponse::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flexsdr.DeviceInfoResponse.serial_number)
}
inline void DeviceInfoResponse::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flexsdr.DeviceInfoResponse.serial_number)
}
inline ::std::string* DeviceInfoResponse::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:flexsdr.DeviceInfoResponse.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfoResponse::release_serial_number() {
  // @@protoc_insertion_point(field_release:flexsdr.DeviceInfoResponse.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoResponse::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:flexsdr.DeviceInfoResponse.serial_number)
}

// repeated string rx_antennas = 3;
inline int DeviceInfoResponse::rx_antennas_size() const {
  return rx_antennas_.size();
}
inline void DeviceInfoResponse::clear_rx_antennas() {
  rx_antennas_.Clear();
}
inline const ::std::string& DeviceInfoResponse::rx_antennas(int index) const {
  // @@protoc_insertion_point(field_get:flexsdr.DeviceInfoResponse.rx_antennas)
  return rx_antennas_.Get(index);
}
inline ::std::string* DeviceInfoResponse::mutable_rx_antennas(int index) {
  // @@protoc_insertion_point(field_mutable:flexsdr.DeviceInfoResponse.rx_antennas)
  return rx_antennas_.Mutable(index);
}
inline void DeviceInfoResponse::set_rx_antennas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.rx_antennas)
  rx_antennas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceInfoResponse::set_rx_antennas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.rx_antennas)
  rx_antennas_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceInfoResponse::set_rx_antennas(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rx_antennas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flexsdr.DeviceInfoResponse.rx_antennas)
}
inline void DeviceInfoResponse::set_rx_antennas(int index, const char* value, size_t size) {
  rx_antennas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flexsdr.DeviceInfoResponse.rx_antennas)
}
inline ::std::string* DeviceInfoResponse::add_rx_antennas() {
  // @@protoc_insertion_point(field_add_mutable:flexsdr.DeviceInfoResponse.rx_antennas)
  return rx_antennas_.Add();
}
inline void DeviceInfoResponse::add_rx_antennas(const ::std::string& value) {
  rx_antennas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flexsdr.DeviceInfoResponse.rx_antennas)
}
#if LANG_CXX11
inline void DeviceInfoResponse::add_rx_antennas(::std::string&& value) {
  rx_antennas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flexsdr.DeviceInfoResponse.rx_antennas)
}
#endif
inline void DeviceInfoResponse::add_rx_antennas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rx_antennas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flexsdr.DeviceInfoResponse.rx_antennas)
}
inline void DeviceInfoResponse::add_rx_antennas(const char* value, size_t size) {
  rx_antennas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flexsdr.DeviceInfoResponse.rx_antennas)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceInfoResponse::rx_antennas() const {
  // @@protoc_insertion_point(field_list:flexsdr.DeviceInfoResponse.rx_antennas)
  return rx_antennas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceInfoResponse::mutable_rx_antennas() {
  // @@protoc_insertion_point(field_mutable_list:flexsdr.DeviceInfoResponse.rx_antennas)
  return &rx_antennas_;
}

// repeated string tx_antennas = 4;
inline int DeviceInfoResponse::tx_antennas_size() const {
  return tx_antennas_.size();
}
inline void DeviceInfoResponse::clear_tx_antennas() {
  tx_antennas_.Clear();
}
inline const ::std::string& DeviceInfoResponse::tx_antennas(int index) const {
  // @@protoc_insertion_point(field_get:flexsdr.DeviceInfoResponse.tx_antennas)
  return tx_antennas_.Get(index);
}
inline ::std::string* DeviceInfoResponse::mutable_tx_antennas(int index) {
  // @@protoc_insertion_point(field_mutable:flexsdr.DeviceInfoResponse.tx_antennas)
  return tx_antennas_.Mutable(index);
}
inline void DeviceInfoResponse::set_tx_antennas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.tx_antennas)
  tx_antennas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceInfoResponse::set_tx_antennas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.tx_antennas)
  tx_antennas_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceInfoResponse::set_tx_antennas(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tx_antennas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flexsdr.DeviceInfoResponse.tx_antennas)
}
inline void DeviceInfoResponse::set_tx_antennas(int index, const char* value, size_t size) {
  tx_antennas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flexsdr.DeviceInfoResponse.tx_antennas)
}
inline ::std::string* DeviceInfoResponse::add_tx_antennas() {
  // @@protoc_insertion_point(field_add_mutable:flexsdr.DeviceInfoResponse.tx_antennas)
  return tx_antennas_.Add();
}
inline void DeviceInfoResponse::add_tx_antennas(const ::std::string& value) {
  tx_antennas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flexsdr.DeviceInfoResponse.tx_antennas)
}
#if LANG_CXX11
inline void DeviceInfoResponse::add_tx_antennas(::std::string&& value) {
  tx_antennas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flexsdr.DeviceInfoResponse.tx_antennas)
}
#endif
inline void DeviceInfoResponse::add_tx_antennas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tx_antennas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flexsdr.DeviceInfoResponse.tx_antennas)
}
inline void DeviceInfoResponse::add_tx_antennas(const char* value, size_t size) {
  tx_antennas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flexsdr.DeviceInfoResponse.tx_antennas)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceInfoResponse::tx_antennas() const {
  // @@protoc_insertion_point(field_list:flexsdr.DeviceInfoResponse.tx_antennas)
  return tx_antennas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceInfoResponse::mutable_tx_antennas() {
  // @@protoc_insertion_point(field_mutable_list:flexsdr.DeviceInfoResponse.tx_antennas)
  return &tx_antennas_;
}

// double min_rx_gain = 5;
inline void DeviceInfoResponse::clear_min_rx_gain() {
  min_rx_gain_ = 0;
}
inline double DeviceInfoResponse::min_rx_gain() const {
  // @@protoc_insertion_point(field_get:flexsdr.DeviceInfoResponse.min_rx_gain)
  return min_rx_gain_;
}
inline void DeviceInfoResponse::set_min_rx_gain(double value) {
  
  min_rx_gain_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.min_rx_gain)
}

// double max_rx_gain = 6;
inline void DeviceInfoResponse::clear_max_rx_gain() {
  max_rx_gain_ = 0;
}
inline double DeviceInfoResponse::max_rx_gain() const {
  // @@protoc_insertion_point(field_get:flexsdr.DeviceInfoResponse.max_rx_gain)
  return max_rx_gain_;
}
inline void DeviceInfoResponse::set_max_rx_gain(double value) {
  
  max_rx_gain_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.max_rx_gain)
}

// double min_tx_gain = 7;
inline void DeviceInfoResponse::clear_min_tx_gain() {
  min_tx_gain_ = 0;
}
inline double DeviceInfoResponse::min_tx_gain() const {
  // @@protoc_insertion_point(field_get:flexsdr.DeviceInfoResponse.min_tx_gain)
  return min_tx_gain_;
}
inline void DeviceInfoResponse::set_min_tx_gain(double value) {
  
  min_tx_gain_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.min_tx_gain)
}

// double max_tx_gain = 8;
inline void DeviceInfoResponse::clear_max_tx_gain() {
  max_tx_gain_ = 0;
}
inline double DeviceInfoResponse::max_tx_gain() const {
  // @@protoc_insertion_point(field_get:flexsdr.DeviceInfoResponse.max_tx_gain)
  return max_tx_gain_;
}
inline void DeviceInfoResponse::set_max_tx_gain(double value) {
  
  max_tx_gain_ = value;
  // @@protoc_insertion_point(field_set:flexsdr.DeviceInfoResponse.max_tx_gain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace flexsdr

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flexsdr::TuneRequest_Policy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flexsdr::TuneRequest_Policy>() {
  return ::flexsdr::TuneRequest_Policy_descriptor();
}
template <> struct is_proto_enum< ::flexsdr::UnitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flexsdr::UnitType>() {
  return ::flexsdr::UnitType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_flexsdr_2eproto
